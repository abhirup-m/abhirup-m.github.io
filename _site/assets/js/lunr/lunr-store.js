var store = [{
        "title": "Our work on the single-channel Kondo problem has been published in Phys. Rev. B",
        "excerpt":"   We analyze the single-channel Kondo model using the recently developed unitary renormalization-group (URG) method and obtain a comprehensive understanding of the Kondo screening cloud. The fixed-point low-energy Hamiltonian enables the computation of a plethora of thermodynamic quantities (specific heat, susceptibility, Wilson ratio, etc.) as well as spectral functions, all of which are found to be in good agreement with known results. By integrating out the impurity, we obtain an effective Hamiltonian for the excitations of the electrons comprising the Kondo cloud. This is found to contain both k-space number diagonal (Fermi liquid) and off-diagonal four-fermion scattering terms.   Our conclusions are reinforced by a URG study of the two-particle entanglement and many-body correlations among members of the Kondo cloud and impurity. The entanglement between the impurity and a cloud electron, as well as between any two cloud electrons, is found to increase under flow towards the singlet ground state at the strong-coupling fixed point. Both the number diagonal and off-diagonal correlations within the conduction cloud are also found to increase as the impurity is screened under the flow, and the latter are found to be responsible for the macroscopic entanglement of the Kondo-singlet ground state. The URG flow enables an analytic computation of the phase shifts suffered by the conduction electrons at the strong-coupling fixed point.   This reveals an orthogonality catastrophe between the local-moment and strong-coupling ground states and is related to a change in the Luttinger volume of the conduction bath under the crossover to strong coupling. Our results offer fresh insight into the nature of the emergent many-particle entanglement within the Kondo cloud and pave the way for further investigations in more exotic contexts such as the fixed point of the overscreened multichannel Kondo problem.  ","categories": ["manuscript"],
        "tags": ["Kondo model","impurity models"],
        "url": "/2111.10580/",
        "teaser": null
      },{
        "title": "My A-to-Z Anime Ratings: the best as well as the worst",
        "excerpt":"Anime refers to a specific form of media - hand-drawn or computer-generated animated shows that originate from Japan. Anime differ from western animation productions in various aspects - art style, themes, target audience, etc. Anime have a distinct 2D style that has a particular appeal and that sets it apart from computer generated animation. The themes explored in anime are often very serious, ranging from shows like Neon Genesis Evangelion and Serial Experiments Lain that focus on the human psyche and depression, to more modern shows like Death Note, Code Geass and Attack on Titan that deal with topics like racism, genocide and the subjective nature of morality. Some very popular and mainstream anime include Dragon Ball, Pokémon and Naruto.      These are my personal ratings of the anime that I have watched over the years. They are pulled from my MAL profile. All ratings are out of 10.                  10: blasphemous       9: unwatchable       8: repulsive       7: boring       6: watchable                 5: average       4: enjoyable       3: wonderful       2: outstanding       1: legendary                          Anime Title       My Rating       MAL Rating                       Kiss x Sis (TV)       10       6.64                 Shingeki no Kyojin       10       8.53                 Shingeki no Kyojin OVA       10       7.86                 Shingeki no Kyojin Season 2       10       8.50                 Shingeki no Kyojin Season 3 Part 2       10       9.07                 Shingeki no Kyojin: Kuinaki Sentaku       10       8.41                 Shingeki no Kyojin: Lost Girls       10       7.80                 Shingeki no Kyojin: The Final Season       10       8.84                 Shingeki no Kyojin: The Final Season Part 2       10       8.84                 Amagi Brilliant Park       5       7.48                 Hibike! Euphonium 2       5       8.30                 K-On!       5       7.85                 K-On!!       5       8.17                 Kanojo mo Kanojo       5       6.58                 Mob Psycho 100       5       8.48                 Mob Psycho 100 II       5       8.81                 Neon Genesis Evangelion       5       8.34                 School Days       5       5.55                 Tengen Toppa Gurren Lagann       5       8.63                 86       6       8.24                 Boku no Hero Academia 2nd Season       6       8.16                 Clannad: Mou Hitotsu no Sekai, Tomoyo-hen       6       7.95                 Detective Conan Movie 06: The Phantom of Baker Street       6       8.30                 Digimon Adventure 02       6       7.23                 Digimon Adventure: Last Evolution Kizuna       6       8.17                 Eromanga-sensei       6       6.39                 Hibike! Euphonium       6       8.00                 Horimiya       6       8.21                 Howl no Ugoku Shiro       6       8.66                 Kanojo, Okarishimasu       6       7.22                 Kaze Tachinu       6       8.10                 Kimi ni Todoke 2nd Season       6       7.99                 Komi-san wa, Comyushou desu.       6       8.03                 Mononoke Hime       6       8.68                 Nisekoi OVA       6       7.38                 One Punch Man       6       8.51                 Ore Monogatari!!       6       7.91                 Sakura-sou no Pet na Kanojo       6       8.11                 Seiren       6       6.29                 Senpai ga Uzai Kouhai no Hanashi       6       7.68                             Anime Title       My Rating       MAL Rating                       Sono Bisque Doll wa Koi wo Suru       6       8.36                 Summer Ghost       6       7.89                 Tsuki ga Kirei       6       8.09                 Umi ga Kikoeru       6       6.55                 Yakusoku no Neverland 2nd Season       6       5.36                 86 Part 2       7       8.71                 Air       7       7.28                 Akira       7       8.16                 Amagami SS       7       7.31                 Angel Beats!       7       8.08                 Another       7       7.49                 Ansatsu Kyoushitsu       7       8.10                 Ansatsu Kyoushitsu 2nd Season       7       8.51                 Beastars       7       7.88                 Boku dake ga Inai Machi       7       8.32                 Boku no Hero Academia       7       7.93                 Boku no Hero Academia 3rd Season       7       8.09                 Boku no Hero Academia the Movie 2: Heroes:Rising       7       8.02                 Charlotte       7       7.75                 Darling in the FranXX       7       7.23                 Digimon Adventure 02 Movies       7       7.11                 Dr. Stone       7       8.30                 Dragon Ball Z       7       8.15                 Elfen Lied       7       7.50                 Fullmetal Alchemist       7       8.12                 Golden Time       7       7.75                 Guilty Crown       7       7.44                 Hotaru no Haka       7       8.50                 Hotarubi no Mori e       7       8.31                 Hunter x Hunter       7       8.40                 Kanon (2006)       7       7.97                 Karakai Jouzu no Takagi-san 2       7       8.09                 Karakai Jouzu no Takagi-san 3       7       8.50                 Kimetsu no Yaiba       7       8.55                 Kimetsu no Yaiba Movie: Mugen Ressha-hen       7       8.66                 Kimetsu no Yaiba: Mugen Ressha-hen       7       8.39                 Kimetsu no Yaiba: Yuukaku-hen       7       8.87                 Kimi ni Todoke       7       8.00                 Kono Subarashii Sekai ni Shukufuku wo!       7       8.12                 Kono Subarashii Sekai ni Shukufuku wo! Movie: Kurenai Densetsu       7       8.47                             Anime Title       My Rating       MAL Rating                       Kono Subarashii Sekai ni Shukufuku wo!: Kono Subarashii Choker ni Shukufuku wo!       7       7.85                 Kuzu no Honkai       7       7.18                 Kyoukai no Kanata       7       7.74                 Masamune-kun no Revenge       7       6.75                 Mushoku Tensei: Isekai Ittara Honki Dasu       7       8.37                 Mushoku Tensei: Isekai Ittara Honki Dasu Part 2       7       8.74                 Naruto       7       7.97                 Naruto: Shippuuden       7       8.24                 Nisekoi: OVA       7       7.06                 Noragami       7       7.96                 Noragami Aragoto       7       8.17                 Plastic Memories       7       7.92                 Psycho-Pass       7       8.35                 Ramayana: The Legend of Prince Rama       7       8.18                 Re:Zero kara Hajimeru Isekai Seikatsu 2nd Season Part 2       7       8.48                 ReLIFE       7       7.99                 Seishun Buta Yarou wa Bunny Girl Senpai no Yume wo Minai       7       8.27                 Suzumiya Haruhi no Yuuutsu       7       7.84                 Tamako Love Story       7       7.93                 Tenki no Ko       7       8.31                 Tokyo Ghoul √A       7       7.03                 Tokyo Ghoul:re       7       6.38                 Tokyo Ghoul:re 2nd Season       7       6.40                 Tonikaku Kawaii       7       7.92                 Toradora!       7       8.11                 Vinland Saga       7       8.73                 Yahari Ore no Seishun Love Comedy wa Machigatteiru.       7       8.02                 Yahari Ore no Seishun Love Comedy wa Machigatteiru. Kan       7       8.38                 Yahari Ore no Seishun Love Comedy wa Machigatteiru. Zoku       7       8.23                 Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e (TV)       7       7.86                 Ano Hi Mita Hana no Namae wo Bokutachi wa Mada Shiranai.       8       8.33                 Bokura no       8       7.63                 Chuunibyou demo Koi ga Shitai! Movie: Take On Me       8       8.12                 Clannad       8       8.01                 Darwin’s Game       8       7.25                 Death Note       8       8.62                 Digimon Adventure       8       7.77                 Fruits Basket 1st Season       8       8.22                 Fruits Basket 2nd Season       8       8.57                 Fullmetal Alchemist: Brotherhood       8       9.14                             Anime Title       My Rating       MAL Rating                       Haikyuu!!       8       8.45                 Hunter x Hunter (2011)       8       9.05                 Hyouka       8       8.09                 Kaguya-sama wa Kokurasetai: Tensai-tachi no Renai Zunousen       8       8.40                 Kimi no Na wa.       8       8.87                 Kimi no Suizou wo Tabetai       8       8.57                 Kiseijuu: Sei no Kakuritsu       8       8.35                 Koe no Katachi       8       8.95                 Kokoro Connect       8       7.77                 Mimi wo Sumaseba       8       8.22                 Mirai Nikki (TV)       8       7.45                 Nisekoi       8       7.59                 Nisekoi:       8       7.36                 No Game No Life       8       8.11                 Re:Zero kara Hajimeru Isekai Seikatsu       8       8.25                 Re:Zero kara Hajimeru Isekai Seikatsu 2nd Season       8       8.37                 Seishun Buta Yarou wa Yumemiru Shoujo no Yume wo Minai       8       8.62                 Shigatsu wa Kimi no Uso       8       8.66                 Steins;Gate Movie: Fuka Ryouiki no Déjà vu       8       8.46                 Suzumiya Haruhi no Shoushitsu       8       8.62                 The Last: Naruto the Movie       8       7.78                 Tokyo Ghoul       8       7.79                 Tonikaku Kawaii: SNS       8       8.13                 Yakusoku no Neverland       8       8.54                 Clannad: After Story       9       8.94                 Code Geass: Hangyaku no Lelouch       9       8.70                 Code Geass: Hangyaku no Lelouch R2       9       8.91                 Fruits Basket: The Final       9       9.03                 Haikyuu!! To the Top       9       8.36                 Kaguya-sama wa Kokurasetai: Ultra Romantic       9       9.16                 Kaguya-sama wa Kokurasetai? Tensai-tachi no Renai Zunousen       9       8.65                 Senryuu Shoujo       9       7.40                 Shingeki no Kyojin Season 3       9       8.62                 Steins;Gate       9       9.08                 Steins;Gate 0       9       8.52              ","categories": ["blog"],
        "tags": ["anime","ratings"],
        "url": "/myanimelist/",
        "teaser": null
      },{
        "title": "Moments that Saved Anime",
        "excerpt":"Anime refers to a specific form of media - hand-drawn or computer-generated animated shows that originate from Japan. Anime differ from western animation productions in various aspects - art style, themes, target audience, etc. Anime have a distinct 2D style that has a particular appeal and that sets it apart from computer generated animation. The themes explored in anime are often very serious, ranging from shows like Neon Genesis Evangelion and Serial Experiments Lain that focus on the human psyche and depression, to more modern shows like Death Note, Code Geass and Attack on Titan that deal with topics like racism, genocide and the subjective nature of morality. Some very popular and mainstream anime include Dragon Ball, Pokémon and Naruto.   Here are some moments in various anime series that have become iconic over the years and that portray the depth, intrigue and beauty of storytelling in this form of media. I have restricted myself to one moment per show, for the sake of versatility.   Needless to say, there will be huge spoilers. You have been warned.   Fruits Basket 2019: The Final  “Lets make footprints in the snow together.”        Fruits Basket is a series that I hold very close to my heart, particularly for the drama and romance aspects. In the final season, it is clear that all the various characters are moving beyond their insecurities into the outside world, forging new relations. In the quest to lend meaning to his life, Yuki finds a kindred broken soul in Machi Kuragi.   Kaguya Sama: Love is War!  “A once-in-a-lifetime wish from me to you.”        Hunter x Hunter  “Komugi, are you there?”        Clannad After Story  “It’s the one you chose and bought for me.”        Steins Gate  _ “You are about to begin… the longest and most imporant … 3 weeks of your life”_        Naruto Shippuden  “I, Madara, declare you the strongest.”        Code Geass: Lelouch of the Rebellion 2  “And that… Yes. is the Zero requiem.”        Attack on Titan Season 3 Part 2  “I keep moving forward…“       ","categories": ["blog"],
        "tags": ["anime","rankings"],
        "url": "/moments/",
        "teaser": null
      },{
        "title": "Our work on the multichannel Kondo problem is now available on the arxiv.",
        "excerpt":"Some background and questions addressed   This work is devoted towards understanding how various important properties of multi-channel Kondo (MCK) physics (e.g., the nature of its criticality and the emergence of gapless local non-Fermi liquid excitations) arise from the frustration of spin-singlet order and ground state degeneracy in the system. We recall that the absence of Fermi liquid excitations, an imperfect screening of impurity local moment, and a \\(T=0\\) divergence of the impurity susceptibility are some of the defining features that make the MCK problem different from its single-channel counterpart. However, the structure of the ground-state manifold of this problem, and the quantum entanglement encoded therein, remain unknown in general. This is due to the lack of an effective Hamiltonian at the intermediate-coupling critical fixed point that defines the low energy physics of the problem.   This elicits the following questions:          Can features of the ground state Hilbert space be used to obtain fresh insights on the criticality and emergence of non-Fermi liquids in the MCK?            How is the entanglement of the ground state and lowest-lying excited states different from the single-channel case?            Does the orthogonality catastrophe of the ground state show up in any of these measures? Answering such important questions is the primary goal of our work.        Multichannel Kondo model, where the central impurity spin (red sphere) interacts with multiple conduction channels (brown and gray spheres). The two channels try to force opposite configurations on the impurity spin, leading to its frustration.   Methods and main results   We begin by employing the unitary renormalisation group (URG) formalism developed recently by us to derive the low energy intermediate coupling fixed point effective Hamiltonian of the MCK with \\(N\\) conduction channels. In the zero-bandwidth limit, the effective Hamiltonian corresponds to a star graph model of the impurity moment interacting with \\(N\\) spin\\(-1/2\\) moments via Heisenberg antiferromagnetic exchange. This makes apparent the frustration inherent in the problem, and reveals the fact that the start graph model possesses a \\(N\\)-fold degenerate ground-state manifold. The critical behaviour of the effective Hamiltonian is captured via a zero-temperature discontinuity in the impurity magnetization and a related divergence in the impurity susceptibility. The topological feature of the ground state manifold can be captured through spectral flow arguments. We also find that a local Mott liquid is formed from the conduction bath moments that couple to the impurity, and formed by inter-channel interactions (induced by the impurity).   The availability of an effective Hamiltonian has further enabled the study of the ground state wavefunction of the MCK. For example, we have been able to display the inter-channel and intra-channel entanglement structure, unveil a discontinuity in various entanglement measures such as the \\(N-\\)partite information (for \\(N&gt;1\\)), and employed the Bures distance measure to capture the orthogonality catastrophe in the MCK system. We have also identified two kinds of duality transformations in the MCK models, and show how they constrain the nature of the RG flows as well as connect between the overscreened and underscreened versions of the problem. We end by studying the effect of channel-anisotropic perturbations on the Kondo couplings: the impurity phase transitions here are shown to be related to changes in the ground state degeneracy structure of the model. While the main results are presented in the manuscript, we have provided various detailed derivations and additional results in the Supplementary Materials. Thus, our work offers a host of new results on the entanglement features of the multi-channel Kondo problem, and the central role of quantum frustration in describing its signature properties.    (a) Schematic diagram of 8−channel multichannel Kondo model zero mode. (b) All-to-all model obtained by disentangling the impurity spin from the bath zero modes. \\(C_\\mu\\) is a particular closed curve. (c) Translated configuration along the curve \\(C_\\mu\\) by one unit.   Main results: Importance of the star graph zero mode   Upon the addition of electronic dispersion to the zero-bandwidth model, we have derived the effective Hamiltonian for two-channel and three-channel (shown in the Supplementary Materials provided along with the main manuscript). These effective Hamiltonians clearly show the absence of local Fermi liquid due to the exact cancellation of terms associated with degenerate ground states, and the emergence of non-Fermi liquid (NFL) excitations arising from the related orthogonality catastrophe. Importantly, the RG equation is seen to be guided by the scattering phase shift arising from those members of the degenerate ground state manifold of the star graph that cause the maximal impurity magnetisation; the intermediate coupling fixed point of the MCK is seen to correspond to a function of this scattering phase shift. The algebraic behaviour of the impurity contribution to the specific heat and magnetic susceptibility, as well as the fractional value of the impurity entropy at \\(T=0\\), are also observed to be related to this scattering phase shift. Thus, our results establish the central role played by ground state degeneracy in governing the physics of the MCK, including the emergence of the NFL phase and various thermodynamic properties associated with it.  ","categories": ["manuscript"],
        "tags": ["Kondo models","impurity models","Kondo breakdown","non-Fermi liquid"],
        "url": "/2205.00790/",
        "teaser": null
      },{
        "title": "Getting Yourself a Beautiful Website Using Jekyll",
        "excerpt":"I work in a theoretical physics research group, and we recently decided to create a new website for the group. Since I had already worked on two websites, I wanted to take this up. For the benefit of myself as well as the others who will come after me and might have to handle the website, I decided to document the entire process, in as much detail as possible. I believe there are too many general-purpose blog posts on creating Jekyll websites in the wild (see, for example, this, this or this), so this will instead be an elaborate wiki for a very specific use case. The website will have a home page that gives an overview of the research of the group, a dedicated page for the list of publications, a gallery for the present and past members of the group, a page for a more detailed exposition on the topics of our research, as well as other miscellaneous content.      Ruby, gems and Jekyll  Ruby is an interpreted, high-level programming language. Libraries in ruby are referred to as gems. RubyGems is a package manager for ruby that makes installing and maintaining gems easier. Bundler is a gem whose job is to create consistent environments for running ruby. It does this by managing the gems that the application depends on. Given a list of gems, it can automatically download and install those gems, as well as any other gems needed by the gems that are listed, all at the appropriate versions.      Finally, Jekyll is a static site generator written in ruby. It is in fact a gem that takes text written in your favorite markup language and uses layouts to create a static website. You can tweak the site’s look and feel, URLs, the data displayed on the page, and more. Such a website can then be hosted on any server. Github Pages is a free option, where you can host the website on GitHub’s github.io domain or on a custom domain name of your choice. Jekyll was developed by Tom Preston-Werner, GitHub’s co-founder.   In summary          gems are libraries in the language Ruby, managed by the RubyGems package manager            bundler creates environments from specified libraries and their versions            Jekyll is a ruby library that  generates a static website from the provided content       With these definitions out of the way, we can now start creating the website.   Starting with a base theme   Choosing a Jekyll theme  There are innumerable Jekyll themes on Github. Each such theme consists of a set of templates, layouts, stylesheets and so on. They represent standalone complete websites, and you can add content to it as well modify the existing colors, designs and so on. We will use the famous Minimal Mistakes theme created by Michael Rose. It has a modern and attractive style, and allows for sufficient customisation. The simplest way to use the theme is to create a copy of it, and then add content on top of it or make modifications wherever necessary. There are a couple of ways of creating a copy of the theme, and both these methods involve its GitHub repository. A GitHub repository is simply a cloud storage location for the contents of the theme. In order to create a copy of this theme, we can either download the theme or fork it. Downloading the repository simply downloads the files, while forking the repository creates a copy of the repository under our own GitHub account. Since we would have to ultimately create a repository anyway, it is more efficient to just fork the theme repository. A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project. Once we fork the repository, the new forked repository becomes our base website which we can then tweak.   Forking the theme repository  All the steps will be performed from the account of epqm, my research group. To fork the repository, go to the Minimal Mistakes GitHub repository and click the Fork button at the top right of the webpage.      The fork button is encircled in the screenshot above. Alternatively, you can just go to this link. Either way, you will end up on the page shown in the screenshot below. In order to finish creating the forked repository, you need to insert a name for the new repository, in the space provided under Repository name. In order to act as a GitHub Pages website, the name of the repository has to be of the form username.github.io, where username has to be replaced with the name of the GitHub user account, which in this case is epqm. Choosing any other name will not allow the repository to be used as a website. Once a suitable name has been entered (a green tick should appear adjacent to the name), click the Create fork button.      Deploying the website   The repository for containing our website has now been created, but the website itself is not active yet. In order to activate it, click on the Settings button at the right end of the top menu.      Inside the settings, click on the Pages option in the left sidebar menu.      We are now in the GitHub Pages part of the settings for our repository. Within these settings, you will have to set the Source by clicking on the Branch menu and choosing the master branch. Branches are essentially views of a repository. If we so desire, the files in the repository can be kept in multiple states, each state representing a branch. Any of these branches can be used to deploy a website. By default, there is only one branch, which is called the master branch. By selecting master from the drop-down menu, we are choosing that branch as our website. After selecting master, click on the Save button adjacent to the Branch menu to make the change permanent.      The website has now been deployed. After about 5 minutes, it should be possible to access the website at https://username.github.io. We will have to modify the content in the repository in order to make this into a personalised website for our use.   Summing it all up  We end this part by summarising the steps involved in creating and deploying the website.           The first step is to choose a Jekyll theme on which to start creating the website.            The next step is to fork the GitHub repository of this theme. While forking, the name of the forked repository has to be of the form username.github.io.            Once the repository is created, we need to go to the repository and click on Settings &gt; Pages, and choose master as the branch from which to deploy the website. This has to be confirmed by clicking on Save.       The repository looks like this:      Git &amp; markdown cheatsheet  Going forward, we will be making use of git and markdown, so its necessary to get familiar with the relevant aspects of them.   What is git?  Git is a free version control system. It is used, at the very minimum, to track changes in software, allowing the possibility of rolling back changes, creating branches for working on multiple features simultaneously, and even removing specific changes among many others. We will need to know of a very small subset of the features of git for our purposes. A very basic workflow using git involves the following: (i) making some changes in a project, (ii) telling git to track the files, and hence note the changes made in the files, (iii) asking git to cement these changes by marking this state of the repository as a checkpoint, and (iv) uploading the changes to some cloud/online repository. The second step is referred to as adding the files. This is done using the command git add &lt;file&gt;. The simplest way is to just add all the files in the project. That is done through git add .. The third step is referred to as committing the changes, and each checkpoint is referred to as a commit. Each commit is (preferably) accompanied by a commit message. Commits are made using the command git commit -m &lt;commit message&gt;. The fourth step is referred to as pushing the commit, and is as simple as git push.   There are some other actions that we might find useful. Creating a local copy of an online repository (say, from GitHub) is referred to as cloning the repository: git clone &lt;repository url&gt;. Fetching the latest version of a cloned repository from the online source is referred to as pulling: git pull. We will also often end up in the following scenario: after committing some changes, we realise that we have forgotten to add some small edit to the commit. This is rectified by making all the changes to the project, adding all the files, and then ammending the previous commit while keeping the commit message unchanged: git commit --ammend --no-edit. The option --ammend means we are rectifying the previous commit, while the option --no-edit means we are keeping the previous commit message unchanged. Note that you need to add the files before running the new commit command. If you had also pushed the previous incomplete commit, you need to add a -f flag when you now push the new amended commit.   Summary of git commands  This is a summary of the git commands that are relevant to us. Each command is a concrete example.     Cloning a repository:     git clone https://github.com/epqm/epqm.github.io           Pulling the latest version of repository:     git pull           Adding and committing the changed files, then push online:     git add file1 file2 # EITHER add specific files git add . # OR add all files, just to be sure git commit -m \"modified this and this\" # commit the changes git push # push changes online           Workflow for rectifying the latest commit:     git add file1 file 2 git commit -m \"this is a commit\" git push # realise you forgot to add a file to the commit git add file1 file2 file3 # add the remaining file git commit --ammend --no-edit # make the ammending commit git push -f # force push the new commit to replace the old one           What is markdown?  Markdown is a markup language: it allows us to create a formatted and structured document by using certain predefined symbols. The markdown file itself is just a plain text file, but it can be converted to other formats like pdf, html, docx, odt and others using software like pandoc. For example, if you write # This is heading in a text file and pass this text file through a markdown-to-latex parser, that line will be replaced by \\section{This is a heading}. This is an example to illustrate what I meant when I said that markdown allows us to add formatting by using only a few symbols. Jekyll allows us to create our webpages in markdown. This means that we can write our posts in markdown, and Jekyll will convert that to html.   Summary of markdown rules  The following is a list of the markdown rules that we will often use to format our documents. The version of markdown that is used by our theme is called Kramdown. Kramdown supports some extra features.      Create headers of decreasing levels by using increasing numbers of #:   # Heading 1 ## Heading 2 ###### Heading 6      Make text bold or italic by enclosing within ** or _:   Normal text, **bold text**, _italic text_      Create unnumbered list using -:    - item 1  - item 2  - item 3      Write programming code by enclosing within ` :   `a += 1`      Insert a horizontal rule using three dashes:   ---      Insert a hyperlink using the syntax [text](link):   [link to repo](https://github.com/epqm/epqm.github.io)      Insert a local image using the syntax ![title for image](path_to_image):   ![this is an image](/assets/images/jekyll/edit-final.svg)   Modifying the website  Modifying the website requires pushing changes to the GitHub repository. Whenever we commit and push a change to the repository, GitHub will recompile the repository and update the website with the changes. There are two broad ways of pushing changes to the repository.   Using GitHub’s web interface ✘  The first way is to use the browser interface of GitHub. By opening the repository in your browser, you can edit any file and immediately commit the changes, and this will also update the website. To demonstrate this, we will update the README.md file. The REAME file is present to provide information regarding the repository. It is only displayed in the GitHub repository web interface, and is not displayed on the website. For example, the current README provides information on the Minimal Mistakes theme, because that is the repository from which we forked our repository. In order to update this file, click on the file name in the list of files.  This displays the contents of the file in the browser. In order to start editing the file, click on the edit icon :  This opens the file in the editor of GitHub. We can now update the contents of the README by deleting all the existing content and replacing it with something relevant and simple for the time being. The final form looks something like this:  To save the changes, we need to commit them. This can be done by supplying a commit message in the box provided just under Commit changes near the bottom of the page, and then clicking on Commit changes.    We have now added our first commit to the repository. Even though this does not affect the website (because the README is not displayed there), this exercise demonstrates how we can modify any file within the repository.   There are, however, two issues with this approach:           You can edit only a single file in each commit. You cannot edit multiple files and then combine all those changes into a single commit.            You cannot preview the edit before you commit them. The only way to find out how the website will be affected by your edit is to check the website after you have committed the edits.       Working with a local copy ✔  The more superior approach is to clone the repository (create a local clone in your machine), make changes in your local copy, commit those changes and then push the commits to the GitHub repository. This allows us to make multiple changes within a single commit. We can also preview the changes we have made, by building the repository using Jekyll. While it is true that this requires us to setup git and Jekyll in our local machines, it is only a one-time effort, and is not too tricky. This subsection is a bit long, so we summarise the steps here:      Install git on your machine and download the repository   Install Ruby and relevant gems   Make required changes to files   Build website locally using Jekyll to preview changes   Commit and push changes to upstream when satisfied with changes   We will now elaborate on each of these steps. Note that steps 1 and 2 are preparatory steps and need to be performed only once per website. They are performed only for setting up the environment. Steps 3-5 constitute the workflow that we follow in order to make regular changes to our website.   Creating a local environment   Install git on your machine and download the repository   The basics of git has been summarised in the relevant section. We start by discussing how to install it. On a Linux machine, run one of the following commands in the terminal, depending on the particular distribution you are using:  $ sudo pacman -S git # Arch-based distributions $ sudo apt install git # Debian-based distributions  If you are using macOS, run the following command in the terminal:  $ brew install git  If you are using Windows, go here and click on the link that says 64-bit Git for Windows Setup. This will download the git installer for windows. Once the download has finished, click on the installer and go through all the steps, choosing the default option whenever you are prompted to make a choice.   Now that we have installed git, we need to be able to run git commands. Note that all commands must be run within the folder of the project. On Linux or macOS, you can just open a terminal in the folder of the project and run git commands in that folder. For example, in order to pull the latest version of a research project, we first change into that folder (using cd) and then run git pull.  $ ( ~ )  $ ( ~ ) cd \"/home/historia/storage/work/local MIT\" $ ( local MIT ) git pull Already up to date. $ ( local MIT )  On a Windows machine, we need to change into the folder of the project, right click inside the folder to reveal the drop-down menu, and select Git Bash Here from the menu. This starts a terminal in the folder, where we can now run the same git commands.   Having installed git on your machine, the next step is to provide some details regarding the user account and authentication. Run the following commands in a terminal:  $ git config --global user.name &lt;username&gt; $ git config --global user.email &lt;email id&gt;  The &lt;username&gt; and &lt;email id&gt; are replaced with the username and email-id of your GitHub account. In order to push changes to the GitHub repository, one more step is necessary. In order to authenticate yourself, you need to generate a pair of public-private SSH keys, and add the public key to GitHub. To generate the key, run the following in a terminal:  $ ssh-keygen -t ed25519 -C \"&lt;email id&gt;\"  After running this command, you might be presented with a number of prompts. Press enter at all of them. The final output should display, among other things, the location of the public key. For example, a typical output on Linux reads  $ ssh-keygen -t ed25519 -C \"historia@gmail.com\" Generating public/private ed25519 key pair. Enter file in which to save the key (/home/historia/.ssh/id_ed25519): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/historia/.ssh/id_ed25519 Your public key has been saved in /home/historia/.ssh/id_ed25519.pub The key fingerprint is: SHA256:0w4qTixw3jGOsNObS/5SN2/vkCAA5sjuXp8mjVH7Tek historia@gmail.com  As is apparent, the second line gives the location of the public key. In order to add the public key to GitHub, follow the steps laid out in this GitHub docs page. There is one final step before we are done with setting up git. Whenever we want to push changes for the first time from our local repository to a GitHub repository, we need to specify the branch to which we want to push. In order to avoid doing this for every repository, we run  $ git config --global --add --bool push.autoSetupRemote true  This informs git that any push action will happen between branches of the same name between the local and remote repositories. This concludes setting up git.   The next step is to download the repository. The repository has a url, which can be obtained by opening the GitHub repository in the browser and looking at the navigation bar. For this example, we assume that this url is https://github.com/epqm/epqm.github.io. Copy this url from the browser, and run the following command in either the Linux/macOS terminal or in the Git Bash terminal on Windows:  $ git clone https://github.com/epqm/epqm.github.io  This will download the repository to your machine, into its own folder. By looking at the list of folders, you should be able to tell the name of the folder the repository was downloaded into. Assuming the name of the folder is epqm.github.io, we move into this folder by running cd:  $ cd epqm.github.io   Install Ruby and relevant gems  The next step is to install Ruby and its gems. This is required in order to be able to compile the website locally and see what the website actually looks after the changes we made, before we commit and push the changes. Note also that Ruby2.7 is the version that works best with Jekyll, so that is the version we will install. To install Ruby on a Linux machine, run one of the following commands, depending on your distribution:  $ sudo pacman -S ruby2.7 # Arch-based distributions $ sudo apt install ruby2.7 # Debian-based distributions  On macOS, run the following command:  $ brew install ruby@2.7  These commands need not be run within the repository folder. On Windows, you will need to first go to this download page and click on the link that says Ruby 2.7.6-1 (x64). This downloads the Windows installer for the appropriate Ruby version. Once downloaded, click on the installer and go through the steps to install it, choosing the default option whenever asked to make a choice.   Now that we have installed Ruby 2.7, we have to get into gems. As mentioned before, RubyGems is the library-manager for ruby. It is used to install and remove Ruby libraries, which are also referred to as gems (hence the name RubyGems). The first step is to update RubyGems, and this is done through the commad:  $ sudo gem-2.7 update --system # on Linux $ sudo gem update --system # on macOS $ gem update --system # on Windows  This commands must be run in a Linux/macOS/Windows terminal. The Windows terminal can be accessed from the drop down menu that appears by holding down Shift and then clicking the right mouse button.   Having updated RubyGems, we now need to install the specific gems that are necessary for our website. The list of the necessary gems along with their versions is already provided in the repository in the form of Gemfile(s) which can be read by a gem named bundler. Bundler makes it easy to install a specific set of gems. Note that the following two commands have to be run inside the folder of the repository. You can either use your graphical file explorer to navigate into this folder and open a terminal there, or you can just cd into the folder from a terminal that was opened elsewhere. At any rate, ensure you are in a terminal and inside the repository folder. Then, run the following two commands:  $ bundle config set --local path 'vendor/bundle' # set the location for installing gems $ bundle-2.7 install # install the required gems   The first command sets the location where the gems will be installed. The second command installs the required gems, into the location specified earlier. As mentioned before, the part after the ‘#’ acts as a comment which is ignored by the terminal and which has been provided just for your information.   Broad workflow for making changes   Make required changes to files  Just to demonstrate the workflow of making changes to the website, previewing it and pushing the changes, we will make a simple edit. Open the _pages/about.md file in a text editor. There should be some text between two --- at the top of the page - do not edit that. Instead, remove all the text below the bottom ---, and replace it with something else, like “Welcome to EPQM!”. Save the changes in the text editor and close it. The below images show the state of the file before and after the edit.      Build website locally using Jekyll to preview changes  Having made some changes, it is time to compile the website using jekyll to preview the changes. In order to compile the website, make sure that you are just inside the repository folder, and not inside anny of the subfolders within the repository. Having ensured this, start a terminal in the folder and run the following command:  $ bundle-2.7 exec jekyll serve -lIw  An explanation of this command is due. The first part bundle-2.7 exec means that we will be running the later part of the command inside the environment created by the gems listed in the Gemfile. This ensures that the correct versions of the libraries are used. The latter part jekyll serve instructs jekyll to compile the website and make it available to be viewed. You can view the website by opening the browser and going to the url http://localhost:4000/. The final part -lIw is a set of options that we have passed to jekyll.     The option w stands for watch; it makes sure that if we keep this command running, jekyll automatically recompiles the website whenever we make and save any changes.   The option l stands for livereload; it refreshes the browser whenever we make and save any changes, in order to reflect the modified website.   The option I means incremental build; it allows faster compiling of the website.   To see the effect our change in the about.md file, open the browser and go to http://localhost:4000/. This will show the home page of the website. At the right end of the top bar, click on the About tab, and this opens the about page of the website. In this page, we should be able to see the message we typed in earlier in the about.md file.      Commit and push changes to upstream when satisfied with changes  Once we are happy with the changes, we need to commit and push them to GitHub, so that they are reflected on the actual website that can be viewed at https://&lt;username&gt;.github.io, which for us is https://epqm.github.io/. As discussed above, the final steps are adding the files, committing the change and then pushing the changes to GitHub.  $ git add . $ git commit -m \"modified about\" $ git push   Important point about editing _config.yml  As mentioned in the Jekyll subsection, whenever we edit and save a file within the repository, the change is immediately reflected in the browser, as long as the Jekyll process is running in the background. This is true for editing all files except the _config.yml file at the root of the repository. Whenever you edit that file, the effect of this edit is not immediately visible. You need to stop the currently-running Jekyll process (by pressing CTRL+c in the terminal) and start a new Jekyll build process (using exactly the same command as before). If you now refresh the browser tab, the change will be visible.   Directory structure of repository   Next, we need to get an idea of what the various folders and files in the repository mean. If you open the repository in any file manager, you should see the following items. Each listed item is followed by a very brief description. For more details, please check out the appropriate page on the official website.           assets/: This folder is used to store various binary files like images and video that we might want to show on the website            .bundle/: This folder is created by bundler to store files that it uses, for example configuration files.            _data/: As the name suggests, this is the folder where you can store data files, like your list of publications or the names of books you have read. This data can be accessed using the liquid variable {{ site.data.&lt;filename&gt; }}.            .git/: This folder is created by git and is used by git to do all its work. This should not be touched under normal circumstances.            _pages/: This folder is used to store all the pages of the website. By pages, I mean content that is more of the blog kind, as compared to notifications and timely posts. Any file of the correct syntax and file name placed in this folder will be interpreted by Jekyll to be a webpage and will be rendered accordingly into the website.            _posts/: This folder stores all the posts of the website. While the pages can be used to represent timeless content like tutorials, essays and blogs, posts usually report notifications, updates and other timely content.            _site/: This is where the final rendered website is created and stored, by Jekyll. GitHub pages looks into this folder and displays its content as the website. We don’t need to touch this.            vendor/: This is the folder that we had provided to bundler as the location for installing the gems. As such, this is where you can find all the installed gems for this repository. We don’t need to touch this either.            _config.yml: This file can be used to define a large number of configuration settings for the website, including the title and description, color theme, social media links, website logo. We need to go through this file carefully and set appropriate values for the fields. Also note that while modifications to all other files will automatically be reflected in the browser if Jekyll has been run with the -lIw flags, modifications to the _config.yml file will not be automatically reflected; after saving the changes, you would need to restart the Jekyll process and then refresh the webpages.            Gemfile: This file is used to codify which gems (along with approximate versions) are required by the repository to function properly. It is used by bundler to create the required environment for compiling the website.            Gemfile.lock: This file additionally specifies exactly which versions of the gems mentioned in the Gemfile actually work. This exact version in Gemfile.lock is in contrast to the approximate versioning provided in the Gemfile. We should not need to touch this file.            .gitignore: This is a file used by git; whichever file/path we list in this file will not be tracked (backed up or version-controlled) by git. For example, the vendor folder should be included in this file because we do not want to backup the installed gems - we can always install them anyway.            index.html: This is the home page of the website.            .jekyll-metadata: This helps Jekyll keep track of which files have not been modified since the site was last built, and which files will need to be regenerated on the next build. It is only created when using incremental regeneration. This file will not be included in the generated site.            README.md: This file is not rendered by Jekyll; it is instead rendered on the GitHub repository front page, and can be used to furnish information there.       Getting started - Basic settings  ","categories": ["blog"],
        "tags": ["technology","guide"],
        "url": "/jekyll/",
        "teaser": null
      },{
        "title": "All Foreshadowing and Easter Eggs in Attack on Titan: Season 1",
        "excerpt":"I will be spoiling the entirety of the anime. You have been warned.   AOT is particularly famous among its fans for the insane amount of foreshadowing it has. Almost all plot twists and major events are hinted at in some way or the other, and seemingly innocent incidents and throwaway comments are found to be related to things that happen in the anime several years down the line (in real time).  This is my attempt at creating a complete list of all subtle attempts made in the anime towards foreshadowing some major future event.  The current post focuses on the events of Season 1.   Episode 1           Title of the first episode: To you, 2000 years later. Self-explanatory.            Eren’s dream: At the beginning of S1-EP1, Eren is shown to be having a “really long dream” where he sees certain future events like his mom getting eaten by a titan and Levi squad lying dead in the forest. Eren is not a shifter at this point, so it’s not clear how he was receiving memories. This is probably the only foreshadowing attempt which has not been explained yet in the show.            Wallist preaching about the walls: Just after the previous scene, a follower of the “Wall religion” is seen preaching to pedestrians about the walls. He says “The walls are the works of God! …”, hinting at the fact that the walls were made with the Founding Titan’s powers.            Eren’s reason for wanting to join the scout: The entire interaction between Eren and Grisha in S1-EP1, on the question of joining the Survey Corps, is rather prophetic in hindsight. Firstly, Grisha asks Eren why he wants to “venture outside”, in reference to his own act of taking Faye beyond the walls of the Liberio internment zone. Secondly, part of Eren’s answer is that the sacrifices of those killed in the expeditions would be in vain if nobody followed in their footsteps. This evokes a particular reaction from Grisha, which we later realise is because he himself had similar reasons for undertaking Kruger’s mission.          Episode 2      Eren’s vows to kill them all: “I’ll kill them all! I’ll wipe every one of them… off the face of the earth!” Enough said.   Annie’s appearance: A very young Annie is shown for the first time, taking rations as a refugee who has fled into Wall Rose.   Reiner and Bertholdt’s appearance: Young Reiner and Bertholdt are also shown within a few minutes of Annies’ appearance.      Episode 3      Shadis skips recruits candidates who have already been through hell: Eren and Mikasa’s trial-by-fire at Shiganshina is understable, but it is not clear why Shadis skips RAB and Ymir. RAB’s rite of passage, we later realise, is the Warrior training and the general discrimination in Marley. Ymir has also gone through a hell of her own, as seen in her flashback later.   Focus on Reiner when Eren talks about the armoured titan: During dinner, when Eren says that the armoured titan looked like a normal titan to him, the camera pans to Reiner.   Steam is seen coming out of Eren’s injured head: Eren’s titan healing ability kicking in.   Bertholdt’s story about his village: Bertholdt’s story about how titan’s attacked his village is later shown in Season 4 to be the same story that RAB heard from some villager when they first entered Wall Rose.   Reiner wants to return to his homeland: Reiner says that he only cares about returning to his “abandoned homeland,…,no matter what”. He is talking about returning to Liberio and to his family after completing the mission.   “Grisha, today your son has become a soldier.”: Shadis’ words to himself hints to some connection between Keith Shadis and Grisha Jaeger.      Episode 4      Annie points out the contradiction in the system where the best soldiers are sent farthest away from the titans.: Annie, while practising martial arts with Eren, points out that the military system of their world is internally contradictory, because the candidates who are top of the class are encouraged to join the military police and stay within the inner walls, even though they should be best suited for fighting titans. This is probably intentionally enforced by the government so that the secret of the titans remains hidden.   Episode 5           The teacher’s comments  on titans: During one of the classes for the trainees, the teacher makes a number of interesting comments. He says that the titan’s lack reproductive organs. The inference would then be that they have no need for reproduction, and some external party was sending them here. The teacher also says that most appear male, which might be because male Eldians were more likely to end up becoming restorationists or being generally impulsive enough to end up being prosecuted by Marley.  The final most important comment is that the titans’ only purpose in life appeared to be consuming humans, even though they can survive without that. This is of course because the titans are looking for a titan shifter, by consuming whom they can revert back to humans.            Eren is shown to release steam when he loses a leg in the battle for Trost: Titan healing powers at play again.       Episode 6      Mikasa awakens her Ackermann powers: When Eren calls for Mikasa to fight, her entire body and particularly her brain is shown to undergo a transformation, signalling the awakening of her Ackermann powers.      Episode 8           Reiner questions Connie what he knows about the “abnormal” titan: When Connie is talking about the strange behaviour of Eren’s titan and that they can use its rampaging behaviour to escape the dire situation, Reiner asks Connie how much he “knows about the titan”. Reiner was curious because he realised that the titan was probably a shifter.            Reiner and Annie opine that they should protect the “abnornal” titan: They obviously want to figure out if that is a shifter.       Episode 9           Eren’s words in the belly of Santa titan: “I’ll annihilate you. Every single one of you. I’ll destroy you with my own hands.” Sounds suspicious again.            “Their memories will show you how to use it!”: Grish’s says this to Eren before injecting him with titan serum. He is referring to the fact that Eren will get the memories of the past inheritors, and those memories will show him how to transform.            “If you want to save Mikasa, Armin and everyone else, you have got to take control of this power.”: This is another of Grisha’s statements to Eren. Very similar to what Kruger says to Grisha before being eaten by the latter.            RAB rush when they hear a titan transformation: When Eren transforms to shield Mikasa and Armin from the canonball, RAB are the first to rush there.       Episode 10      “If something beyond man appeared before us as a powerful foe, mankind will take up arms together in unity”: Pixis describes an old legend to Eren atop Wall Rose.      Episode 13      Annie is seen apologising to someone in her head, after the battle for Trost: I guess she was thinking of Marco.   Episode 15      “Who do you think the enemy is?”: Erwin’s words to Eren, when Sawney and Bean were killed. Prophetic words that come back throughout the series.   Episode 16      Armin, while standing in line with Annie for their ODM gear inspection, is seen staring intently at Annie’s gear.: Armin had notice that Annie was carrying Marco’s gear instead of her own.   Episode 17           “Avenge that reckless idiot”: Armin’s trap for the female titan.            Reiner pulls his hood back when fighting the female titan: Armin had advised Reiner and Jean to keep their hoods pulled up all the way, because he felt the female would not kill anyone without knowing who they are. Despite that, Reiner pulls his hood back when attacking the female titan. We know the reason for that now: he wanted Annie to recognise him.          Episode 19      Levi’s thoughts about Eren: In the forest of giant trees, Levi says the following about Eren: “He’s a true monster. And not because of his titan abilities. No matter how you try to hold him down. No matter what cage you lock him up in… Forcing his mind into submission is an impossible task.” Spot on.   Episode 21      Eren, while fighting the female titan, says “A-“, before the latter decapitates him.: He recongnised the fighting stance of the female titan, and was going to say “Annie!”.   Episode 22      The female titan is seen crying, when Levi and Mikasa extract Eren from her and escape.: Annie was crying because she would not be able to go home to her father yet.   Episode 23      Annie says “I don’t care if I’m swept along by the flow, as long as I’m still considered a human”.: I believe Annie is saying that she does not mind becoming a warrior and killing Eldians if that helps her being recognised as an honourary Marley an and getting to live an honourable live with her father.      Episode 25      Eren says “I will destroy everything in the world. … I’m free.” near the end of his second fight with Annie.: The first part is definitely foreshadowing the rumbling. The second part, “I’m free”, sheds light on Eren’s psyche, because it makes it clear that Eren’s idea of freedom involves destroying the barriers in his path.   That’s everything I could find in the first season.  ","categories": ["blog"],
        "tags": ["anime","AOT"],
        "url": "/aot-foreshadow/",
        "teaser": null
      },{
        "title": "How to Turn VIFM into a Full-Fledged File Explorer",
        "excerpt":"Vifm is a terminal file manager for linux that relies heavily on vim-like keybindings. Overall it is quite fast and feature-full, making it a prominent choice among minimalist users. Below I mention some steps I have taken to make it more useful.   Most of these require modifying only the VIFM config file. A good place to find/create such a file is ~/.config/vifm/vifmrc. If this file already exists on your machine, create a backup of the file, because we will be editing it. Now delete all contents from the original file (not the backup), and start with an empty vifmrc file. If you do not have such a file at that location, create an empty file with that name.   Coloured file/folder preview and suggestions   VIFM, by default, has a left pane and a right pane.  I have found that it is best to use the left pane as the standard file browser, and the right panel as a preview for the file/folder currently under the cursor. That is enable by the following command:   \" show file and directory preview in right pane view! \" preview text files using \"man\" fileviewer {*.[1-8]},&lt;text/troff&gt; man ./%c | col -b   This runs at startup and forces VIFM to use the right panel for preview. The second command tells VIFM to use the man command for preview text files. We can improve this by introducing multiple colours in the folder preview.   \" enable ls colors in folder preview fileviewer */ ls --color=always fileviewer .*/ ls --color=always   The two commands together instruct VIFM to use the shell command ls --color=always as a folder previewer. The resultant view is shown in the image below.      Enabling suggestions   The functionality of the right panel can be improved by enabling suggestions in the right panel.   \" what to suggest on the right pane set suggestoptions=normal,visual,view,otherpane,keys,marks,registers   You might have set the keybinding dd to delete a file, but you have forgotten whether it was dd or dD. The above setting makes it easy to recall these bindings: if you press ‘d’, the right panel will show all keybinding sequences that start with ‘d’, allowing the user to refresh their memory. Besides keybindings, it also shows all the marks that you have defined. For example, you might have forgotten whether you have marked your work folder to ‘w’ or ‘W’. On pressing ', the right panel will show all the marks that you have defined in the vifmrc, making it easy to use the marks. This is shown in the image below.      Using tabs more efficiently   We often find it convenient to work simultaneously with multiple directories/views. This is where tabs become useful; you can have your work folder open in one tab and your downloads folder open in another tab, and copy files easily from one to the other. In order to make this process easy, insert the following lines in your vimrc.   \" create new tab nnoremap &lt;c-t&gt; :tabnew&lt;cr&gt;:view!&lt;cr&gt;  \" switch to tab to the left nnoremap H :tabprevious&lt;cr&gt;:view!&lt;cr&gt;  \" switch to tab to the left nnoremap L :tabnext&lt;cr&gt;:view!&lt;cr&gt;  \" switch to tab to the left nnoremap Q :q&lt;cr&gt;   The mappings, respectively, mean that you can use CTRL+t to create a new tab, H to switch to the tab on the left, L to switch to the tab on the right, and Q to close to the current tab.   Trash folder for safer deletion   For safer delete operators, we enable the trash setting and set a trash folder.   \" enable trash and set trash folder set trash set trashdir=~/.local/share/Trash/files   If the folder mentioned in the last setting does not exist, you have to create it. Once this is done, any file/folder that is deleted using the default dd keybinding actually goes into the trash folder, and can be restored later. Permanent deletion can be performed through the more distant keybinding DD, to ensure that it does not happen accidentally. We can also remove the confirmation dialog that appears whenever we want to trash/delete a file.   \" remove confirmation before trash/delete set confirm-=delete,permdelete   Customise the statusline   The bottom of the VIFM window shows a statusline where various pieces of information can be displayed. I prefer a simplistic status, where I show the filename at the left end (%t), the current file size (%20s) after that, then the file modification date (%-30d), and finally the remaining storage on the file-system (%a). The numbers represent the width of the blocks.   \" set format of statusline set statusline=\"%t %20s %= %-30d %a\"   The format of the modification date can be set in the following way:   \" set format of file modification time set timefmt='%b %d, %Y @ %H:%M'   The resultant statusline is shown in the image below.      Navigation using marks   Marks can be used as favourite folders to reach them quickly. They are defined in the following manner:   mark h ~/ mark d ~/Downloads/ mark c ~/.config/   Inserting these lines into the vifmrc defines three marks corresponding to the three specified folders. Upon starting vifm, you can now press, say, '+d to change into the Downloads folder. Same holds for the other marks. This provides a very fast method of accessing commonly used folders.   Fuzzy search using fzf   It is easier to search files using a fuzzy finder like fzf. After installing the fzf binary (look up how you can do this in your specific distribution), fuzzy finding can be integrated into VIFM using the following lines:   \" use fzf to fuzzy search and run file command! FZFfind : set noquickview                 \\| let $FZF_PICK = term('find ./* | fzf --height 10 2&gt;/dev/tty')                 \\| if $FZF_PICK != ''                 \\|     execute 'goto' fnameescape($FZF_PICK)                 \\| endif nnoremap / :FZFfind&lt;cr&gt;   The above search is triggered by the keybinding /. It lists all files in the present directory and further down in the subdirectories and allows searching according to the provided prompt. The file that is selected (by pressing Enter) is executed.   Miscellaneous options   There are several settings which also help to be enabled. These are listed below.   \" useful options set syscalls dotfiles wildmenu wildstyle=popup set history=100 undolevels=100 followlinks norunexec set ignorecase smartcase nohlsearch incsearch      syscalls instructs VIFM to use its internal methods for copy/paste operations rather than using utilities like cp.   dotfiles makes the hidden files and folders visible in VIFM.   wildmenu and wildstyle improve the way in which completion is shown for commands.   history sets the maximum number of operations stored in history. undolevels sets the maximum number of actions that can be undone.   followlinks means that clicking on a link directs you to the target. norunexec means clicking on executable files will not automatically execute them.   ignorecase and smartcase mean that search operations are case-insensitive unless there is at least one uppercase character.   nohlsearch and incsearch mean that the search will be incremental and search results will not be selected before enter is pressed.   Keybindings to copy file name, etc   It is very useful to set keybindings for common operations like copying the path of the parent directory, name of the current file under the cursor, and the full path of the current file. Through the commands below, these can be done with the keybindings yd, yn and yp respectively.   \" copy parent directory path to clipboard nnoremap yd :!echo %d %i | xclip -i -r -selection 'clipboard' -f              \\| xclip -i -r -selection 'primary'&lt;cr&gt; \" copy current file name to clipboard nnoremap yn :!echo %c %i | xclip -i -r -selection 'clipboard' -f              \\| xclip -i -r -selection 'primary'&lt;cr&gt; \" copy current file full path to clipboard nnoremap yp :!echo %c:p %i | xclip -i -r -selection 'clipboard' -f              \\| xclip -i -r -selection 'primary'&lt;cr&gt;   Creating new files and folders   The first command below sets t as the key to wait for a filename, and then creates an empty file with the name on pressing enter. The second command similarly does the same for a new folder, but with the key M.   \" mapping to create new blank file nnoremap t :touch&lt;space&gt;  \" mapping to create new folder nnoremap M :mkdir&lt;space&gt;   The directory creation is shown in the image below (notice the :mkdir at the bottom).      Starting a shell or a terminal   \" mapping to open shell in pwd nnoremap S :shell&lt;cr&gt;  \" mapping to start terminal nnoremap &lt;a-t&gt; :!$TERMINAL &amp;&lt;cr&gt;   S starts a shell in the current directory. ALT+t spawns a new terminal by executing the environment variable $TERMINAL. Since I use the simple terminal st, mine is set to TERMINAL=st in my .bashrc file. A spawned terminal is shown in the image below.      Keybindings for fast rename   The two commands below allow renaming files quickly, by pressing a or A. The latter skips the extension and allows renaming only the basename, since that is what we typically do. The latter allows changing the entire filename, including the extension.   \" rename without extension nnoremap a cW  \" rename with extension nnoremap A cw   We often have to select multiple files in a range, for copy or move operations. The two commands below make this easier: SPACE selects one file and then moves the cursor down by one file, allowing us to press SPACE again immediately to select the next file. T does the same thing, but from bottom to top.   \" mapping to toggle select and move down nnoremap &lt;space&gt; tj \" mapping to move up and toggle select nnoremap T kt   An example of a selection is shown in the image below.      That’s all.  ","categories": ["blog"],
        "tags": ["unix","software","ncurses"],
        "url": "/vifm/",
        "teaser": null
      },{
        "title": "The causality loop in Shingeki no Kyojin: Is there a paradox?",
        "excerpt":"The short answer is that there is no paradox: past, present and future all happen simultaneously there, so the question of causality doesn’t really arise. If you want to know what this means or how I came to that conclusion, read on.   Modern day masterpiece Attack on Titan (AOT) is undoubtedly the most consistent television show I have ever experienced. The story is set in a post-apocalyptic world where mankind is on the brink of extinction and lives confined within walls in fear of huge humanoid creatures that are referred to as titans. Because of the elements of fantasy, the world of AOT operates by its own rules which the viewers learn gradually as the show progresses. Encouraged by the consistency and the incredible attention to detail ensured by the author, I have attempted to create a self-consistent set of physical laws for the AOT universe.   Needlesss to say, I will be spoiling all of Attack on Titan that has been aired until now (that is, upto the Final Season Part 2). You have been warned. There are no manga spoilers though.   1. Quantum entanglement connects all Subjects of Ymir      One of the central elements of fantasy in AOT is the fact that each and every subject of Ymir is connected to the Founding titan (and therefore to each other) through the Paths. This connection is extremely non-local; it applies to all Eldians, no matter how far apart they are. This can be understood as quantum entanglement.   For the uninitiated, quantum entanglement is a weird phenomenon where two the properties of multiple objects remain correlated, even over very large distances. For example, we can have a device that produces a red ball and a blue ball and shoots them off randomly towards two volunteers \\(V_1\\) and \\(V_2\\). If volunteer \\(V_1\\) checks and finds that he has a red ball, he immediately knows that volunteer \\(V_2\\) has received a blue ball. The colour of the balls are thus correlated, and the balls can be said to be entangled.      Eren addressing all Subjects of Ymir using the Founding titan’s power can then be understood as a result of quantum entanglement between the Subjects and the Coordinate. Just as volunteer \\(V_2\\) can detect the colour of \\(V_1\\)’s ball simply by checking their own ball, the Subjects can know immediately what Eren’s brain is thinking by listening within their own brains.   2. The Paths represent wormholes that connect all Eldians      A wormhole (also known as Einstein-Rosen bridge) is, loosely speaking, a hypothetical tunnel that connects two distant points in space(-time). Wormholes emerge as solutions of Einsteins equations of general relativity that describe gravity. Recent pursuits by scientists like Leonard Susskind and Juan Maldacena have revealed that two entangled particles might be connected by a wormhole.      In light of the thesis presented in the previous point (that all subjects of Ymir are entangled with the Founding titan through the Paths), the Paths must be the corresponding wormholes that connect the entangled parties. For example, when Zeke screams and turns people who have consumed his spinal fluid into pure titans, he is actually channeling his intent and commands through the aforementioned wormhole. When Founder Ymir creates and heals titans, she sends the muscles and bones through these wormholes. That is why the bodies of titans appear almost instantaneously and out of thin air.   3. Time flow in the Paths is orthogonal to that in the physical world      It has been stressed on numerous occasions by Zeke that time flows differently in the Paths. He says to Eren that “whatever happens in the Path, happens instantaneously”. This differential in time flow is also reflected in the fact even through the Founder Ymir expends untold number of years to create the flesh and bones of the titans, the body of the titan appears almost instantaneously in the physical world. This works out because the spacetime of the Paths realm lives in a dimension that is orthogonal to the physical spacetime.   Orthogonal dimensions are nothing special. On a chess board, horizontal and vertical movement are orthogonal, which means that you can shift a rook horizontally by as many squares as you want without needing to move it vertically. A similar geometry also exists between, say, the temporal directions of the physical and the Paths realms. This is shown in the image below. The time passage in the physical world is represented by the horizontal black line (“real time”), while time passage in the Paths real is represented by the vertical blue lines (“Paths time”).      Consider the particular instant in real time when Gabi blows off Eren’s head (as represented by the red mark in the figure). One now has the freedom to move along “Paths time” by traversing the vertical blue axis that starts from the red mark, while keeping “real time” fixed at that that mark. This leads, for example, to the fact that Eren and Zeke spend many years in Paths time going through Grisha’s memories (longish green mark) while staying fixed at the red mark in “real time”.   4. Superluminal propagation of information      In the physical world, there is a limit to how fast any information-carrying signal can travel. This limit is set by the speed of light in vacuum, which is roughly 3 followed by 8 zeroes, in the SI units. Neither light, nor therefore information, can be transmitted at arbitrarily high speeds. This is not true in the world of Attack on Titan, because the Paths make it possible to transmit information instantaneously over arbitrarily large distances. This was used by Eren to address all Subjects of Ymir living across the world. This superluminal propagation is again made possible because of the wormhole-like property of the Paths.   5. Instantaneous propagation = Flattened light cones      In the physical world, there is a limit to how fast any information-carrying signal can travel. This limit is set by the speed of light in vacuum, which is roughly 3 followed by 8 zeroes, in the SI units. Neither light, nor therefore information, can be transmitted at arbitrarily high speeds. This is not true in the world of Attack on Titan, because the Paths make it possible to transmit information instantaneously over arbitrarily large distances. This was used by Eren to address all Subjects of Ymir living across the world. This superluminal propagation is again made possible because of the wormhole-like property of the Paths.   6. Past, Present and Future coexist      In the physical world, there is a limit to how fast any information-carrying signal can travel. This limit is set by the speed of light in vacuum, which is roughly 3 followed by 8 zeroes, in the SI units. Neither light, nor therefore information, can be transmitted at arbitrarily high speeds. This is however not true in the world of Attack on Titan, because the Paths make it possible to transmit information instantaneously over arbitrarily large distances. This was used by Eren to address all Subjects of Ymir living across the world. This superluminal propagation is again made possible because of the wormhole-like property of the Paths.   ","categories": ["blog"],
        "tags": ["anime","AOT"],
        "url": "/aot-physics/",
        "teaser": null
      },{
        "title": "Our work on an auxiliary model-based approach to the Mott MIT is now available on the arxiv.",
        "excerpt":"   Some background on DMFT and the Mott MIT   This work is devoted towards obtaining Hamiltonian-based insight into the dynamical mean-field theory (DMFT) treatment for the half-filled Hubbard model on the Bethe lattice in infinite dimensions. Our work offers an effective auxiliary model Hamiltonian that incorporates the effects of a local interacting self-energy (as obtained from the self-consistent approach of DMFT), and provides insight on the associated Mott metal-insulator transition (MIT). We recall that the conduction bath (of the effective impurity model within DMFT) becomes correlated under the requirement of self-consistency. The numerical implementation of this process precludes a deeper understanding of the precise nature of the correlations present in the conduction bath, and its implications for the electron dynamics of the associated bulk lattice (Hubbard) model.    “Dynamical mean-field theory (DMFT) of correlated-electron solids replaces the full lattice of atoms and electrons with a single impurity atom imagined to exist in a bath of electrons. The approximation captures the dynamics of electrons on a central atom (in orange) as it fluctuates among different atomic configurations, shown here as snapshots in time.” [Source]   Questions addressed by us in the present work   This leads to the following questions that we address in our work:     What are the quantum fluctuations that destroy the metal at \\(T=0\\) and lead to the insulating phase?   Can we obtain a universal theory for the competing tendencies that give rise to these quantum fluctuations?   What leads to the coexistence of metallic and insulating phases within DMFT at \\(T=0\\), as indicated by the fact that the insulating solution is already present within the many-body spectrum of the metallic phase prior to the transition?   Is it possible to obtain a low-energy theory for the local gapless excitations precisely at the MIT, where the metal is on the brink of destruction?   Main results: An extended Anderson impurity model and its QCP   In order to model the interactions within the bath, we adopt an extended single impurity Anderson model (e-SIAM) as the effective auxiliary model for the Mott MIT. In addition to the usual impurity on-site repulsion U and the single-particle hybridisation V, we introduce     an additional on-site correlation (\\(U_b\\)) on the bath site with which the impurity couples, and   an antiferromagnetic Kondo coupling (\\(J\\)) between the impurity and the conduction bath.   These additions are then justified via a \\(T=0\\) renormalisation group (RG) analysis of the e-SIAM that reveals a quantum phase transition (QPT) at a critical value of the ratio (\\(-U_b/J\\)). The transition involves a change in the ground-state from a (Kondo) spin singlet to an unscreened local moment, indicating a Mott MIT in the bulk model associated with the chosen auxiliary model similar to DMFT.    We have extended the standard Anderson impurity model by incorporating an explicit Kondo coupling \\(J\\) and a local correlation \\(U_b\\) on the bath site coupled to the impurity. Such a model shows a local metal-insulator transition.   Main results: Preformed gap = Excited state QPT   We use the fixed-point Hamiltonians obtained from the RG procedure to calculate quantifiers of the transition, e.g., various many-body correlation functions as well as measures of many-particle entanglement. These measures reveal that the transition occurs through a breakdown of the Kondo screening effect, owing to enhanced local pairing fluctuations in the bath proximate to the QPT. In the immediate neighbourhood of the transition, these pairing fluctuations also lead to the appearance of long-ranged correlations between the impurity and the conduction bath degrees of freedom, signalling critical behaviour. Remarkably, we find that the impurity QPT from metal to insulator is preceded by an excited state quantum phase transition (ESQPT): this involves the appearance of the local moment states in the many-body spectrum as excited states. This mechanism leads to a preformed (optical) gap in the impurity spectral function, as well as the coexistence region, in the phase diagram of the e-SIAM. This is consistent with the well-known phenomenology of DMFT.   Main results: Enhanced pairing fluctuations and non-Fermi liquid excitations at the Mott MIT   Further, the e-SIAM provides a minimal and universal local theory for describing Mott metal-insulator transition that arise from strong local correlations, and involves a competition between Kondo screening and its frustration from a locally correlated bath. The minimal model also offers detailed insights on the nature of the gapless excitations present at transition. We find that gapless non-Fermi liquid excitations arise from the ground state degeneracy at the transition, involving an orthogonality catastrophe and the vanishing of the quasiparticle residue of the local Fermi liquid. The non-Fermi liquid is characterised by anomalous power-law behaviour in the self-energy and various two-particle correlations, as well as a fractional entanglement entropy and magnetisation arising from a scattering phase shift of π/2.    Qualitative structure of the finite temperature coexistence region of the \\(J - U_b\\) model. The dotted lines on the left and the right represent the spinodals where the insulating and metallic solutions become unstable, respectively. The solid red line represents the first-order line where the free energies and the partition functions of the two solutions become equal.   Conclusions and outlook   Thus, our work offers a host of new results on multiple aspects of the auxiliary model approach to the Mott MIT. In general, the interplay of multiple correlations in the e-SIAM localisation from repulsion on the impurity site (\\(U\\)), delocalisation from spin and charge fluctuations (\\(J\\) and \\(V\\)), and pairing from local attractive correlations in the bath (\\(U_b\\)) - makes this a strong candidate for describing the emergence of a variety of novel phases of correlated quantum matter. Likely future investigations include, for instance, the effects of hole doping on the nature of the local quantum criticality observed by us, and especially whether critical pairing fluctuations can condense into a superconducting state of matter.     ","categories": ["manuscript"],
        "tags": ["impurity models","Mott MIT","auxiliary models","Kondo effect","quantum phase transition"],
        "url": "/2302.02328/",
        "teaser": null
      },{
        "title": "Our latest work on holographic renormalisation of entanglement in metals is now available on the arxiv.",
        "excerpt":"A bit of background   In the last few decades, quantum entanglement has become very important for studying the nature of quantum condensed matter systems. For instance, gapped interacting many-body systems typically display an area-law scaling of the subsystem entanglement entropy with subsystem size, while quantum critical systems are expected to display a volume law scaling of the same. Further, a subdominant topological term in the entanglement entropy quantifies the long-ranged nature of correlations in topologically ordered insulating states of matter. Much less is known on the entanglement features of gapless metallic systems. Further, the holographic principle posits that the renormalisation group evolution of the many-particle entanglement of an interacting quantum field theory can be visualised as the emergence of an emergent spatial dimension.   Questions addressed   The present work is thus devoted towards addressing the following questions:     Can a first principles calculation of entanglement renormalisation in a relatively simple system demonstrate the holographic emergence of a spatial geometry?   How do the field theoretic parameters (e.g., the RG beta function) relate to the geometry quantifiers (e.g., distances and curvature) in this emergence dimension?   Spectral flow operations on metallic systems lead to a flux-dependent piece in the entanglement entropy. Is this term topological in nature?   If so, is there a correspondence between the topological terms in metallic systems and those obtained in the above-mentioned insulating systems?   Main results of our work   Towards achieving these goals, we study a model of two-dimensional massive non-interacting Dirac fermions placed on a torus, and apply scaling transformations on the associated Hilbert space. The resultant renormalisation of multipartite measures of entanglement exhibits a hierarchy that exists across energy scales as well as across the number of parties. As our demonstration constitutes an exact holographic mapping, we argue that the scaling of the multipartite entanglement leads to the emergence of an additional spatial dimension. Geometric measures defined in this emergent space, such as distances and curvature, can be related to the RG beta function of the coupling g responsible for the spectral mass gap. Depending on the anomalous dimension of g, three classes of spaces (bounded, unbounded and flat) are generated from the RG: changing between classes involves  a topological transition.   In order to study the boundary condition sensitivity of the multipartite entanglement, we thread an Aharonov-Bohm flux through the torus. In the presence of the flux, the entanglement gains a geometry-independent piece that is shown to be topological,  and can be related to the Luttinger volume of the system of electrons. In the presence of a strong transverse magnetic field, the system attains an integer quantum Hall insulating ground state, and Luttinger’s theorem does not hold. We show instead that the entanglement contains a term that can be related to the Chern numbers of the integer quantum Hall states. This yields a relation between the topological invariants of the metallic and the integer quantum Hall systems.   Thus, our work offers an ab initio demonstration of the holographic principle in a prototypical condensed matter system, and sheds new light on geometrical and topological aspects of entanglement in metals.  ","categories": ["manuscript"],
        "tags": ["metals","entanglement","holography","renormalisation-group"],
        "url": "/2302.10590/",
        "teaser": null
      },{
        "title": "Got to showcase my work in a poster session held on the occasion of DPS Days 2023",
        "excerpt":"The department of physical sciences at IISER Kolkata held its DPS Day(s) this year on March 17 and 18. This is an event where we host invited talks on various themes, and the PhD students and post-doctoral researchers of the department present posters on their work.     ","categories": ["update"],
        "tags": ["poster-session","dps-day"],
        "url": "/dps-day-2023/",
        "teaser": null
      },{
        "title": "Chekov's gun and the use of perspectives: what makes Attack on Titan special",
        "excerpt":"Hajime Isayama has pulled off something that I am sure all fiction lovers have dreamt of at some point: create a story that gives the impression that everything had been planned out since the very beginning. Complemented by some of the finest musical scores to appear out of the industry, Attack on Titan is a show that leaves you questioning your own moral compass at the end.      If I had to sell Attack on Titan, I could just give the usual spiel about insane plot twists, thrilling backstories and engaging characters. While I do believe that Attack on Titan (AOT) is a show that embodies all these aspects to their fullest, such a pitch will probably not be that compelling for a random person. Instead, I will point out two specific (and somewhat meta) features of AOT that take the show into a class of its own.   Taking Chekov’s gun to the extreme  Chekhov’s gun is a narrative principle that states that every element in a story must be necessary, and irrelevant elements should be removed. If a writer features a gun in a story, there must be a reason for it, such as it being fired sometime later in the plot. AOT takes this principle to its limit, such that almost every frame in the anime has some purpose which is realised by the viewers, sooner or later. This is a show which does not insult your intelligence in the slightest. No, seriously. Lose focus for a few seconds and you might miss a massive reveal!      Powerful use of perspective in story telling  Several events in the show are presented repeatedly, but from different perspectives. The initial telling of the event is typically from a certain character’s or group’s point of view, and is designed to draw the viewers into sympathising with these character(s). A later-in-time telling of the same event from the opposing side then shatters the confidence of the viewer and makes them question their allegiance. This is used from time to time in the show to create a powerful effect where the viewer is able to empathise with all sides in the conflict.      While the story is one of fantasy, the elements of fantasy only serve as metaphors for real world constructs, and the show has deep connections with the very world we live in, through mature and dark themes like racism, nationalism and imperialism. If nothing else, I leave you with the promise that AOT, as a show, is crafted out of utmost love and passion, and that is visible to anyone who watches the show.  ","categories": ["blog"],
        "tags": ["anime","AOT"],
        "url": "/aot-why/",
        "teaser": null
      },{
    "title": "All About Yours Truly",
    "excerpt":" Poster presentation at E-QMAT 2022, at IIT Roorkee   I am a research scholar at the Indian Institute of Science Education and Research Kolkata (IISER Kolkata), living in Kalyani, West Bengal, India. I work in theoretical condensed matter physics, and am a part of the Emergent Phenomena and Quantum Matter (EPQM) group. I study various topics in the field of strongly correlated materials.   When I am not working, I enjoy catching up on the seasonal anime. Although I am not particularly picky when it comes to the genres of the anime I watch, I do enjoy slice of life shows and thrillers the most. From time to time, I also pick up crime novels. Whenever I get some time, I dabble in Jekyll,  Python and shell scripting, and try out new Linux distributions - I am quite passionate about ricing my desktop.    Key animation of the Levi vs Kenny-squad scene by Arifumi Imai, in the anime Attack on Titan   I used to love watching and playing football during my school years. Nowadays I am mostly a seasonal fan. I am part of an organisation named Projectyl that helps undergraduate and graduate students in finding and applying for short projects and internships in India, with the goal of making it easier for them to transition into their research programs. Feel free to check out our work if you are interested in landing a summer or winter project in physics. Hit me up if you want to be a part of the group.   Contact information               You can always send me emails  for any sort of communication.   You can also reach out to me on Facebook  or LinkedIn.   If you are interested, you can also check out my hobby projects and my PhD research work on Github.     ","url": "http://localhost:4000/about/"
  },{
    "title": "Blog-style posts on python & bash scripting, website-building, anime and other stuff",
    "excerpt":"    Chekov’s gun and the use of perspectives: what makes Attack on Titan special   19 March, 2023animeAOT   The causality loop in Shingeki no Kyojin: Is there a paradox?   7 February, 2023animeAOT   How to Turn VIFM into a Full-Fledged File Explorer   10 January, 2023unixsoftwarencurses   All Foreshadowing and Easter Eggs in Attack on Titan: Season 1   8 January, 2023animeAOT   Getting Yourself a Beautiful Website Using Jekyll   5 July, 2022technologyguide   Moments that Saved Anime   20 June, 2022animerankings   My A-to-Z Anime Ratings: the best as well as the worst   10 June, 2022animeratings  ","url": "http://localhost:4000/blogs/"
  },{
    "title": "Posts by Category",
    "excerpt":" ","url": "http://localhost:4000/categories/"
  },{
    "title": "Welcome to my website!",
    "excerpt":"Recent Updates (see all)                             Our latest work on holographic renormalisation of entanglement in metals is now available on the arxiv.                   FEB 2023.     We show the emergence of an additional dimension arising out of the scaling of multipartite entanglement upon applying RG transformations on 2D noninteracting electrons placed on a torus.  Learn More                                            Our work on an auxiliary model-based approach to the Mott MIT is now available on the arxiv.                   FEB 2023.     In this work, we provide a Hamiltonian-based explanation of the phenomenology of DMFT, obtaining new insights on then MIT along the way.  Learn More                  Miscellaneous News (see all)      Got to showcase my work in a poster session held on the occasion of DPS Days 2023   MAR 18, 2023.  Learn More   ","url": "http://localhost:4000/"
  },{
    "title": "Research Interests",
    "excerpt":"For more details, please check out the projects I am/have been involved in.   Overview   I work in theoretical condensed matter physics, more specifically on strongly correlated fermionic systems. Strong correlation refers to interaction that cannot be expressed purely in terms of single-particle scattering. One of the most popular mathematical models of strong electronic correlation is the Hubbard model - it consists of electrons hopping across a lattice, but each site has a repulsion term that makes it energetically costly for the site to be doubly occupied. This roughly means that each electron will be able to “feel” the presence of other electrons.   The fact that the electrons have to account for the presence of the other electrons is what makes this a complicated many-body problem - its not possible to solve for a single electron without also considering the effect of all the other electrons. I am a part of the Emergent Phenomena and Quantum Matter (EPQM) group. The group’s work involves studying quantum models of correlation and obtaining novel emergent states of matter. The models that have been studied involve quantum magnetism, strong correlation, impurity physics, superconductivity, and others. Other topics of research in the group involve studying the nature of entanglement in gapped (topologically ordered) as well gapless states of matter.   Specific research interests           Quantum impurity models and phase transitions within them, with particular emphasis on universal behaviour near Kondo screening breakdown, and non-Fermi liquid behaviour about such points.            Using auxiliary models for studying emergence in lattice models of strong-correlation, like the periodic Anderson  and Kondo models as well as Hubbard-like models, focusing on metal-insulator transitions arising out of repulsion.            Studying the topological properties of gapless systems, as well as their entanglement. Interested in connections to holography arising out of such considerations. Also interested in identical questions that can arise in topologically active systems as well.            Quantum hall systems and other topologically active states of matter, from a microscopic viewpoint.            Renormalisation group in the context of optimization problems. Using particular renormalisation group method(s) to classify microscopic models based on behaviour of quantum fluctuations.          Master’s thesis work   A short abstract of my master’s research work and the thesis itself can be found here. I studied an extended Anderson impurity model using an analytical non-perturbative renormalisation group method.   Informal write-ups   By going to this page (internal link), you can find some informal documents/write-ups/notes I have prepared on various topics while learning them, either for courses I was attending or for my tutor assistantships. They might be helpful as very quick introductions or as an opinionated conglomeration of the ideas of certain topics.  ","url": "http://localhost:4000/work/"
  },{
    "title": "MS Thesis",
    "excerpt":"Master’s thesis work   Towards my master’s research project (can be found here), I performed an analytical non-perturbative renormalization group analysis of an extended single impurity Anderson model (SIAM). The standard SIAM involves a correlated impurity site embedded in a conduction bath, the two being coupled through a single-particle hopping. The analysis includes a derivation of the unitary renormalization group (URG) equations for the couplings, as well as computation of physical properties. The URG is a recent many-body technique developed in Refs [1-4], and is applies unitary transformations on the Hamiltonian to decouple high energy modes, leading to a low-energy effective Hamiltonian. We apply the URG on a generalized version of the SIAM with explicit spin-exchange and charge isospin-exchange couplings. We find strong-coupling fixed points for both the spin and isospin couplings. We characterise the fixed-point by studying the ground state wavefunctions and thermodynamic quantities like the magnetic susceptibility and the specific heat. We extract an effective Hamiltonian for the cloud of electrons that screen the impurity. This effective Hamiltonian is found to contain both Fermi liquid as well as four-Fermion off-diagonal interaction terms. We show that the flow to the strong-coupling fixed point involves a change in the topological Luttinger volume by 1. We finally calculate the mutual information and correlations along the RG flow between impurity and a Kondo cloud electron, as well as between two members of the Kondo cloud. Both the measures increase towards the strong-coupling fixed point, showing that the flow towards low energies is accompanied by a substantial increase in the entanglement content.   References     A Mukherjee and S Lal 2020 New J. Phys. 22 063007   A Mukherjee and S Lal 2020 New J. Phys. 22 063008   A Mukherjee and S Lal 2020 Nuclear Physics B 960 115170   A Mukherjee and S Lal 2020 Nuclear Physics B 960 115163   My master’s project thesis    ","url": "http://localhost:4000/ms-thesis/"
  },{
    "title": "R. Shankar's RG derivation for Landau Fermi liquid and BCS instability",
    "excerpt":"R. Shankar’s RG derivation for Landau Fermi liquid and BCS instability   This is an expansion of R. Shankar’s derivation (Shankar, 1993) of the Landau Fermi liquid effective Hamiltonian and its possible BCS instability by applying the renormalization group technique on a general 2D interacting fermionic system with a circular Fermi surface. I have added a short introduction to the philosophy of renormalisation group. Certain non-trivial arguments and calculations have also been fleshed out. Where possible, certain parts have been simplified.    ","url": "http://localhost:4000/phys_note_RG/"
  },{
    "title": "Topological significance of the crystal momentum",
    "excerpt":"Topological significance of the crystal momentum   This is a re-working of R. Rajaraman’s demonstration that the tight-binding dispersion can be obtained by treating the problem of electrons moving in a periodic potential in terms of instantons. This has the advantage that the crystal momentum can be identified as a topological winding number.    ","url": "http://localhost:4000/phys_note_bloch/"
  },{
    "title": "Lightning-quick introduction to single site dynamical mean field theory",
    "excerpt":"Lightning-quick introduction to single site dynamical mean field theory   This is a very short introduction to the philosophy and algorithm of dynamical mean field theory (DMFT). I brought these points together and wrote this up mostly to cement my own understanding of the topic. I first discuss the Curie-Weiss mean field theory in the context of the Ising model in order to provide a familiar language, and set up in a slightly different way so that it is easily generalised to DMFT. This might be useful for anyone wanting to know, in brief, what DMFT is, and how it is implemented.    ","url": "http://localhost:4000/phys_note_dmft/"
  },{
    "title": "The tight-binding model on the 2D square lattice",
    "excerpt":"The tight-binding model on the 2D square lattice   This is a quick introduction to the tight-binding problem on a 2D square lattice. I describe how it can be obtained from a more general model, its solution and some of its important properties like the isoenergetic contours and van Hove singularities.    ","url": "http://localhost:4000/phys_note_tbm/"
  },{
    "title": "Research Work",
    "excerpt":"This is a list of my publications (and preprints) and the projects that I am currently involved in. A more detailed version of my research interests can be found here.   Ongoing Projects      A new auxiliary model approach to studying metal-insulator transitions in bulk lattice models; connecting the infinite dimensional auxiliary model to a finite dimensional system without resorting to self-consistency   Kondo model in magnetic field: breakdown of Kondo effect and its consequences for symmetry breaking, entanglement loss and the measurement problem   Publications and Preprints           HOLOGRAPHIC ENTANGLEMENT RENORMALISATION FOR FERMIONIC QUANTUM MATTER: GEOMETRICAL AND TOPOLOGICAL ASPECTS     Abhirup Mukherjee, Siddhartha Patra, Siddhartha Lal   Feb 21, 2023   arXiv:2302.10590            KONDO FRUSTRATION VIA CHARGE FLUCTUATIONS: A ROUTE TO MOTT LOCALISATION     Abhirup Mukherjee, N. S. Vidhyadhiraja, A. Taraphder, Siddhartha Lal   Feb 5, 2023   arXiv:2302.02328            FRUSTRATION SHAPES MULTI-CHANNEL KONDO PHYSICS: A STAR GRAPH PERSPECTIVE     Siddhartha Patra, Abhirup Mukherjee, Anirban Mukherjee, N. S. Vidhyadhiraja, A. Taraphder, Siddhartha Lal   Jan 14, 2023   arXiv:2205.00790            UNVEILING THE KONDO CLOUD: UNITARY RG STUDY OF THE KONDO MODEL     Anirban Mukherjee, Abhirup Mukherjee, N. S. Vidhyadhiraja, A. Taraphder, Siddhartha Lal   Feb 2, 2022   PRB 105, 085119   arXiv:2111.10580       ","url": "http://localhost:4000/research/"
  },{
    "title": "Posts by Tag",
    "excerpt":" ","url": "http://localhost:4000/tags/"
  },{
    "title": "Updates",
    "excerpt":"         Got to showcase my work in a poster session held on the occasion of DPS Days 2023   18 March, 2023            Our latest work on holographic renormalisation of entanglement in metals is now available on the arxiv.   22 February, 2023            Our work on an auxiliary model-based approach to the Mott MIT is now available on the arxiv.   9 February, 2023            Our work on the multichannel Kondo problem is now available on the arxiv.   1 July, 2022            Our work on the single-channel Kondo problem has been published in Phys. Rev. B   1 March, 2022       ","url": "http://localhost:4000/updates/"
  },{
    "title": "Informal write-ups",
    "excerpt":"These are some casual documents I have prepared on various topics while learning them, either for courses I was attending or for my tutor assistantships. They might be helpful as very quick introductions or as an opinionated conglomeration of the ideas of certain topics.           The tight-binding model on the 2D square lattice   This is a quick introduction to the tight-binding problem on a 2D square lattice. I describe how it can be obtained from a more general model, its solution and some of its important properties like the isoenergetic contours and van Hove singularities.            Topological significance of the crystal momentum   This is a re-working of R. Rajaraman’s demonstration that the tight-binding dispersion can be obtained by treating the problem of electrons moving in a periodic potential in terms of instantons. This has the advantage that the crystal momentum can be identified as a topological winding number.            R. Shankar’s RG derivation for Landau Fermi liquid and BCS instability   This is an expansion of R. Shankar’s derivation (Shankar, 1993) of the Landau Fermi liquid effective Hamiltonian and its possible BCS instability by applying the renormalization group technique on a general 2D interacting fermionic system with a circular Fermi surface. I have added a short introduction to the philosophy of renormalisation group. Certain non-trivial arguments and calculations have also been fleshed out. Where possible, certain parts have been simplified.            Lightning-quick introduction to single site dynamical mean field theory   This is a very short introduction to the philosophy and algorithm of dynamical mean field theory (DMFT). I brought these points together and wrote this up mostly to cement my own understanding of the topic. I first discuss the Curie-Weiss mean field theory in the context of the Ising model in order to provide a familiar language, and set up in a slightly different way so that it is easily generalised to DMFT. This might be useful for anyone wanting to know, in brief, what DMFT is, and how it is implemented.      ","url": "http://localhost:4000/write-ups/"
  },{
    "title": null,
    "excerpt":"var idx = lunr(function () {   this.field('title')   this.field('excerpt')   this.field('categories')   this.field('tags')   this.ref('id')    this.pipeline.remove(lunr.trimmer)    for (var item in store) {     this.add({       title: store[item].title,       excerpt: store[item].excerpt,       categories: store[item].categories,       tags: store[item].tags,       id: item     })   } });  $(document).ready(function() {   $('input#search').on('keyup', function () {     var resultdiv = $('#results');     var query = $(this).val().toLowerCase();     var result =       idx.query(function (q) {         query.split(lunr.tokenizer.separator).forEach(function (term) {           q.term(term, { boost: 100 })           if(query.lastIndexOf(\" \") != query.length-1){             q.term(term, {  usePipeline: false, wildcard: lunr.Query.wildcard.TRAILING, boost: 10 })           }           if (term != \"\"){             q.term(term, {  usePipeline: false, editDistance: 1, boost: 1 })           }         })       });     resultdiv.empty();     resultdiv.prepend(''+result.length+' Result(s) found ');     for (var item in result) {       var ref = result[item].ref;       if(store[ref].teaser){         var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+                 ''+               ''+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       else{     \t  var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       resultdiv.append(searchitem);     }   }); }); ","url": "http://localhost:4000/assets/js/lunr/lunr-en.js"
  },{
    "title": null,
    "excerpt":"step1list = new Array(); step1list[\"ΦΑΓΙΑ\"] = \"ΦΑ\"; step1list[\"ΦΑΓΙΟΥ\"] = \"ΦΑ\"; step1list[\"ΦΑΓΙΩΝ\"] = \"ΦΑ\"; step1list[\"ΣΚΑΓΙΑ\"] = \"ΣΚΑ\"; step1list[\"ΣΚΑΓΙΟΥ\"] = \"ΣΚΑ\"; step1list[\"ΣΚΑΓΙΩΝ\"] = \"ΣΚΑ\"; step1list[\"ΟΛΟΓΙΟΥ\"] = \"ΟΛΟ\"; step1list[\"ΟΛΟΓΙΑ\"] = \"ΟΛΟ\"; step1list[\"ΟΛΟΓΙΩΝ\"] = \"ΟΛΟ\"; step1list[\"ΣΟΓΙΟΥ\"] = \"ΣΟ\"; step1list[\"ΣΟΓΙΑ\"] = \"ΣΟ\"; step1list[\"ΣΟΓΙΩΝ\"] = \"ΣΟ\"; step1list[\"ΤΑΤΟΓΙΑ\"] = \"ΤΑΤΟ\"; step1list[\"ΤΑΤΟΓΙΟΥ\"] = \"ΤΑΤΟ\"; step1list[\"ΤΑΤΟΓΙΩΝ\"] = \"ΤΑΤΟ\"; step1list[\"ΚΡΕΑΣ\"] = \"ΚΡΕ\"; step1list[\"ΚΡΕΑΤΟΣ\"] = \"ΚΡΕ\"; step1list[\"ΚΡΕΑΤΑ\"] = \"ΚΡΕ\"; step1list[\"ΚΡΕΑΤΩΝ\"] = \"ΚΡΕ\"; step1list[\"ΠΕΡΑΣ\"] = \"ΠΕΡ\"; step1list[\"ΠΕΡΑΤΟΣ\"] = \"ΠΕΡ\"; step1list[\"ΠΕΡΑΤΑ\"] = \"ΠΕΡ\"; step1list[\"ΠΕΡΑΤΩΝ\"] = \"ΠΕΡ\"; step1list[\"ΤΕΡΑΣ\"] = \"ΤΕΡ\"; step1list[\"ΤΕΡΑΤΟΣ\"] = \"ΤΕΡ\"; step1list[\"ΤΕΡΑΤΑ\"] = \"ΤΕΡ\"; step1list[\"ΤΕΡΑΤΩΝ\"] = \"ΤΕΡ\"; step1list[\"ΦΩΣ\"] = \"ΦΩ\"; step1list[\"ΦΩΤΟΣ\"] = \"ΦΩ\"; step1list[\"ΦΩΤΑ\"] = \"ΦΩ\"; step1list[\"ΦΩΤΩΝ\"] = \"ΦΩ\"; step1list[\"ΚΑΘΕΣΤΩΣ\"] = \"ΚΑΘΕΣΤ\"; step1list[\"ΚΑΘΕΣΤΩΤΟΣ\"] = \"ΚΑΘΕΣΤ\"; step1list[\"ΚΑΘΕΣΤΩΤΑ\"] = \"ΚΑΘΕΣΤ\"; step1list[\"ΚΑΘΕΣΤΩΤΩΝ\"] = \"ΚΑΘΕΣΤ\"; step1list[\"ΓΕΓΟΝΟΣ\"] = \"ΓΕΓΟΝ\"; step1list[\"ΓΕΓΟΝΟΤΟΣ\"] = \"ΓΕΓΟΝ\"; step1list[\"ΓΕΓΟΝΟΤΑ\"] = \"ΓΕΓΟΝ\"; step1list[\"ΓΕΓΟΝΟΤΩΝ\"] = \"ΓΕΓΟΝ\";  v = \"[ΑΕΗΙΟΥΩ]\"; v2 = \"[ΑΕΗΙΟΩ]\"  function stemWord(w) {   var stem;   var suffix;   var firstch;   var origword = w;   test1 = new Boolean(true);    if(w.length '+result.length+' Result(s) found ');     for (var item in result) {       var ref = result[item].ref;       if(store[ref].teaser){         var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+                 ''+               ''+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       else{     \t  var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       resultdiv.append(searchitem);     }   }); }); ","url": "http://localhost:4000/assets/js/lunr/lunr-gr.js"
  },{
    "title": null,
    "excerpt":"var store = [   {%- for c in site.collections -%}     {%- if forloop.last -%}       {%- assign l = true -%}     {%- endif -%}     {%- assign docs = c.docs | where_exp:'doc','doc.search != false' -%}     {%- for doc in docs -%}       {%- if doc.header.teaser -%}         {%- capture teaser -%}{{ doc.header.teaser }}{%- endcapture -%}       {%- else -%}         {%- assign teaser = site.teaser -%}       {%- endif -%}       {         \"title\": {{ doc.title | jsonify }},         \"excerpt\":           {%- if site.search_full_content == true -%}             {{ doc.content | newline_to_br |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \"|             strip_html | strip_newlines | jsonify }},           {%- else -%}             {{ doc.content | newline_to_br |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \"|             strip_html | strip_newlines | truncatewords: 50 | jsonify }},           {%- endif -%}         \"categories\": {{ doc.categories | jsonify }},         \"tags\": {{ doc.tags | jsonify }},         \"url\": {{ doc.url | relative_url | jsonify }},         \"teaser\": {{ teaser | relative_url | jsonify }}       }{%- unless forloop.last and l -%},{%- endunless -%}     {%- endfor -%}   {%- endfor -%}{%- if site.lunr.search_within_pages -%},   {%- assign pages = site.pages | where_exp:'doc','doc.search != false' -%}   {%- for doc in pages -%}     {%- if forloop.last -%}       {%- assign l = true -%}     {%- endif -%}   {     \"title\": {{ doc.title | jsonify }},     \"excerpt\":         {%- if site.search_full_content == true -%}           {{ doc.content | newline_to_br |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \"|           strip_html | strip_newlines | jsonify }},         {%- else -%}           {{ doc.content | newline_to_br |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \"|           strip_html | strip_newlines | truncatewords: 50 | jsonify }},         {%- endif -%}       \"url\": {{ doc.url | absolute_url | jsonify }}   }{%- unless forloop.last and l -%},{%- endunless -%}   {%- endfor -%} {%- endif -%}] ","url": "http://localhost:4000/assets/js/lunr/lunr-store.js"
  },{
    "title": null,
    "excerpt":" {% if page.xsl %} {% endif %} {% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %} {{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }} {% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }} {% endif %} {% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %} {{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }} {% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }} {% endif %} {% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %} {{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }} {{ file.modified_time | date_to_xmlschema }}  {% endfor %} ","url": "http://localhost:4000/sitemap.xml"
  },{
    "title": null,
    "excerpt":"Sitemap: {{ \"sitemap.xml\" | absolute_url }} ","url": "http://localhost:4000/robots.txt"
  },{
    "title": null,
    "excerpt":"{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ page.url | absolute_url | xml_escape }}{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}{{ title | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% if page.tags %}{% assign posts = site.tags[page.tags] %}{% else %}{% assign posts = site[page.collection] %}{% endif %}{% if page.category %}{% assign posts = posts | where: \"category\", page.category %}{% endif %}{% unless site.show_drafts %}{% assign posts = posts | where_exp: \"post\", \"post.draft != true\" %}{% endunless %}{% assign posts = posts | sort: \"date\" | reverse %}{% assign posts_limit = site.feed.posts_limit | default: 10 %}{% for post in posts limit: posts_limit %}{% assign post_title = post.title | smartify | strip_html | normalize_whitespace | xml_escape %}{{ post_title }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}{{ post.content | strip | xml_escape }}{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: \"\" | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% elsif post.categories %}{% for category in post.categories %}{% endfor %}{% endif %}{% for tag in post.tags %}{% endfor %}{% if post.excerpt and post.excerpt != empty %}{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}{% endif %}{% endfor %}","url": "http://localhost:4000/feed.xml"
  }]
