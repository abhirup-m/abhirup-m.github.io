var store = [{
        "title": "[New work] On the Single-channel Kondo problem",
        "excerpt":" Unveiling the Kondo cloud: Unitary renormalization-group study of the Kondo model    A. Mukherjee,&emsp;Abhirup Mukherjee,&emsp;N. S. Vidhyadhiraja,&emsp;A. Taraphder,&emsp;S. Lal  \t 14/02/22    Phys. Rev. B   arXiv  More     The Kondo model consists of an impurity spin \\(\\vec S_d~\\) interacting with a local conduction bath spin \\(\\vec S_0~\\) through a spin-exchange coupling \\(\\vec S_d\\cdot \\vec S_0~\\). While it is clear that at high temperatures, the impurity spin remains decoupled from the bath because of thermal spin fluctuations, the behaviour at low temperatures is more non-trivial and required the development of a new framework before the problem was solved. Indeed, it was only after the development and application of the numerical renormalisation group method when we realised that the ground state of this model was a macroscopic spin singlet state - an entangled state formed by the impurity spin and the local spin of the conduction bath that couples to the Kondo impurity.      The locking of the impurity spin into a singlet through the quenching of its spin degrees of freedom at low temperatures is analogous to the phenomenon of colour confinement that binds quarks to form hadrons at temperatures below the Hagedorn temperature. While the ground state was known for quite some time, no simple description (effective Hamiltonian) for the Kondo cloud (the set of conduction electrons that form the singlet) was available. Moreover, the variation of the quantum entanglement as the system approached the singlet state was unknown. Our work sheds light on these topics. We used the recently developed unitary renormalisation group method to obtain the effective Hamiltonian for the Kondo model at the RG fixed point, and then derived the effective Hamiltonian for the conduction electrons by integrating out the impurity.      Interestingly, a lot of the physics like the ground state, the qualitative nature of screening, certain thermodynamic quantities and universal constants can be obtained from the zero bandwidth limit of the RG fixed point Hamiltonian, which turns out to be just a two-spin Heisenberg model. To obtain the effective Hamiltonian for the excitations, we added a tight-binding hopping into the zero bandwidth model and studied its effects using renormalised perturbation theory about the fixed point. The excitations of the conduction electrons are found to contain both Fermi liquid and non-Fermi liquid components, the latter arising from the spin-flip fluctuations.      These non-Fermi liquid components are therefore responsible for the quenching of the impurity. This is further supported by the study of the entanglement and correlations within the Kondo cloud; we find that electrons within the Kondo cloud get entangled more strongly as the system approaches the fixed point, while the spin-spin correlations are also found to increase. All these are direct signatures of the screening of the impurity. Feel free to check out the published version or the ar\\(\\chi\\)iv preprint.  ","categories": ["update"],
        "tags": ["work","arxiv-upload"],
        "url": "/kondo/",
        "teaser": null
      },{
        "title": "[New work] On the Multi-channel Kondo problem",
        "excerpt":" Frustration shapes multi-channel Kondo physics: a star graph perspective    S. Patra,&emsp;Abhirup Mukherjee,&emsp;A. Mukherjee,&emsp;N. S. Vidhyadhiraja,&emsp;A. Taraphder,&emsp;S. Lal  \t 02/05/22       arXiv  More     The multichannel Kondo model consists of $K$ conduction channels $\\vec S_i$ interacting with an impurity spin of strength $S_d$ (the Kondo model corresponds to $K=1,S_d=1/2$). It is well-known that the overscreened case $(K &gt; 2S_d)$ corresponds to a degenerate ground state, incomplete quenching of the local moment and non-Fermi liquid excitations characterised by anomalous zero temperature divergences in thermodynamic quantities like the specific heat and susceptibility. Nevertheless, there was no ab initio derivation of the non-Fermi liquid Hamiltonian that describes these excitations. Neither had the precise role of quantum frustration in this problem and the effect of degeneracy on the low-energy physics been made clear. The frustration arises in this problem because the impurity is unable to form a singlet with a single conduction channel.      We study the overscreened multi-channel Kondo (MCK) model using the recently developed unitary renormalization group (URG) technique. Our results display the importance of ground state degeneracy in explaining various important properties like the breakdown of screening and the presence of local non-Fermi liquids. The impurity susceptibility of the intermediate coupling fixed point Hamiltonian in the zero-bandwidth (or star graph) limit shows a power-law divergence at low temperature, signaling its critical nature. Despite the absence of inter-channel coupling in the MCK fixed point Hamiltonian, the study of mutual information between any two channels shows non-zero correlation between them.   A spectral flow analysis of the star graph reveals that the degenerate ground state manifold possesses topological quantum numbers. Upon disentangling the impurity spin from its partners in the star graph, we find the presence of a local Mott liquid arising from inter-channel scattering processes. The low energy effective Hamiltonian obtained upon adding a finite non-zero conduction bath dispersion to the star graph Hamiltonian for both the two and three-channel cases displays the presence of local non-Fermi liquids arising from inter-channel quantum fluctuations. Specifically, we confirm the presence of a local marginal Fermi liquid in the two channel case, whose properties show logarithmic scaling at low temperature as expected. Discontinuous behaviour is observed in several measures of ground state entanglement, signaling the underlying orthogonality catastrophe associated with the degenerate ground state manifold.      We extend our results to underscreened and perfectly screened MCK models through duality arguments. A study of channel anisotropy under renormalisation flow reveals a series of quantum phase transitions due to the change in ground state degeneracy. Our work thus presents a template for the study of how a degenerate ground state manifold arising from symmetry and duality properties in a multichannel quantum impurity model can lead to novel multicritical phases at intermediate coupling.  Feel free to check out the ar\\(\\chi\\)iv preprint.  ","categories": ["update"],
        "tags": ["work","arxiv-upload"],
        "url": "/mckondo/",
        "teaser": null
      },{
        "title": "My Anime Ratings",
        "excerpt":"   Anime refers to a specific form of media - hand-drawn or computer-generated animated shows that originate from Japan. Anime differ from western animation productions in various aspects - art style, themes, target audience, etc. Anime have a distinct 2D style that has a particular appeal and that sets it apart from computer generated animation. The themes explored in anime are often very serious, ranging from shows like Neon Genesis Evangelion and Serial Experiments Lain that focus on the human psyche and depression, to more modern shows like Death Note, Code Geass and Attack on Titan that deal with topics like racism, genocide and the subjective nature of morality. Some very popular and mainstream anime include Dragon Ball, Pok√©mon and Naruto. These are my personal ratings of the anime that I have watched over the years. They are pulled from my MAL profile. All ratings are out of 10.                  10: blasphemous       9: unwatchable       8: repulsive       7: boring       6: watchable                 5: average       4: enjoyable       3: wonderful       2: outstanding       1: legendary                          Anime Title       My Rating       MAL Rating                       Kiss x Sis (TV)       10       6.64                 Shingeki no Kyojin       10       8.53                 Shingeki no Kyojin OVA       10       7.86                 Shingeki no Kyojin Season 2       10       8.50                 Shingeki no Kyojin Season 3 Part 2       10       9.07                 Shingeki no Kyojin: Kuinaki Sentaku       10       8.41                 Shingeki no Kyojin: Lost Girls       10       7.80                 Shingeki no Kyojin: The Final Season       10       8.84                 Shingeki no Kyojin: The Final Season Part 2       10       8.84                 Amagi Brilliant Park       5       7.48                 Hibike! Euphonium 2       5       8.30                 K-On!       5       7.85                 K-On!!       5       8.17                 Kanojo mo Kanojo       5       6.58                 Mob Psycho 100       5       8.48                 Mob Psycho 100 II       5       8.81                 Neon Genesis Evangelion       5       8.34                 School Days       5       5.55                 Tengen Toppa Gurren Lagann       5       8.63                 86       6       8.24                 Boku no Hero Academia 2nd Season       6       8.16                 Clannad: Mou Hitotsu no Sekai, Tomoyo-hen       6       7.95                 Detective Conan Movie 06: The Phantom of Baker Street       6       8.30                 Digimon Adventure 02       6       7.23                 Digimon Adventure: Last Evolution Kizuna       6       8.17                 Eromanga-sensei       6       6.39                 Hibike! Euphonium       6       8.00                 Horimiya       6       8.21                 Howl no Ugoku Shiro       6       8.66                 Kanojo, Okarishimasu       6       7.22                 Kaze Tachinu       6       8.10                 Kimi ni Todoke 2nd Season       6       7.99                 Komi-san wa, Comyushou desu.       6       8.03                 Mononoke Hime       6       8.68                 Nisekoi OVA       6       7.38                 One Punch Man       6       8.51                 Ore Monogatari!!       6       7.91                 Sakura-sou no Pet na Kanojo       6       8.11                 Seiren       6       6.29                 Senpai ga Uzai Kouhai no Hanashi       6       7.68                             Anime Title       My Rating       MAL Rating                       Sono Bisque Doll wa Koi wo Suru       6       8.36                 Summer Ghost       6       7.89                 Tsuki ga Kirei       6       8.09                 Umi ga Kikoeru       6       6.55                 Yakusoku no Neverland 2nd Season       6       5.36                 86 Part 2       7       8.71                 Air       7       7.28                 Akira       7       8.16                 Amagami SS       7       7.31                 Angel Beats!       7       8.08                 Another       7       7.49                 Ansatsu Kyoushitsu       7       8.10                 Ansatsu Kyoushitsu 2nd Season       7       8.51                 Beastars       7       7.88                 Boku dake ga Inai Machi       7       8.32                 Boku no Hero Academia       7       7.93                 Boku no Hero Academia 3rd Season       7       8.09                 Boku no Hero Academia the Movie 2: Heroes:Rising       7       8.02                 Charlotte       7       7.75                 Darling in the FranXX       7       7.23                 Digimon Adventure 02 Movies       7       7.11                 Dr. Stone       7       8.30                 Dragon Ball Z       7       8.15                 Elfen Lied       7       7.50                 Fullmetal Alchemist       7       8.12                 Golden Time       7       7.75                 Guilty Crown       7       7.44                 Hotaru no Haka       7       8.50                 Hotarubi no Mori e       7       8.31                 Hunter x Hunter       7       8.40                 Kanon (2006)       7       7.97                 Karakai Jouzu no Takagi-san 2       7       8.09                 Karakai Jouzu no Takagi-san 3       7       8.50                 Kimetsu no Yaiba       7       8.55                 Kimetsu no Yaiba Movie: Mugen Ressha-hen       7       8.66                 Kimetsu no Yaiba: Mugen Ressha-hen       7       8.39                 Kimetsu no Yaiba: Yuukaku-hen       7       8.87                 Kimi ni Todoke       7       8.00                 Kono Subarashii Sekai ni Shukufuku wo!       7       8.12                 Kono Subarashii Sekai ni Shukufuku wo! Movie: Kurenai Densetsu       7       8.47                             Anime Title       My Rating       MAL Rating                       Kono Subarashii Sekai ni Shukufuku wo!: Kono Subarashii Choker ni Shukufuku wo!       7       7.85                 Kuzu no Honkai       7       7.18                 Kyoukai no Kanata       7       7.74                 Masamune-kun no Revenge       7       6.75                 Mushoku Tensei: Isekai Ittara Honki Dasu       7       8.37                 Mushoku Tensei: Isekai Ittara Honki Dasu Part 2       7       8.74                 Naruto       7       7.97                 Naruto: Shippuuden       7       8.24                 Nisekoi: OVA       7       7.06                 Noragami       7       7.96                 Noragami Aragoto       7       8.17                 Plastic Memories       7       7.92                 Psycho-Pass       7       8.35                 Ramayana: The Legend of Prince Rama       7       8.18                 Re:Zero kara Hajimeru Isekai Seikatsu 2nd Season Part 2       7       8.48                 ReLIFE       7       7.99                 Seishun Buta Yarou wa Bunny Girl Senpai no Yume wo Minai       7       8.27                 Suzumiya Haruhi no Yuuutsu       7       7.84                 Tamako Love Story       7       7.93                 Tenki no Ko       7       8.31                 Tokyo Ghoul ‚àöA       7       7.03                 Tokyo Ghoul:re       7       6.38                 Tokyo Ghoul:re 2nd Season       7       6.40                 Tonikaku Kawaii       7       7.92                 Toradora!       7       8.11                 Vinland Saga       7       8.73                 Yahari Ore no Seishun Love Comedy wa Machigatteiru.       7       8.02                 Yahari Ore no Seishun Love Comedy wa Machigatteiru. Kan       7       8.38                 Yahari Ore no Seishun Love Comedy wa Machigatteiru. Zoku       7       8.23                 Youkoso Jitsuryoku Shijou Shugi no Kyoushitsu e (TV)       7       7.86                 Ano Hi Mita Hana no Namae wo Bokutachi wa Mada Shiranai.       8       8.33                 Bokura no       8       7.63                 Chuunibyou demo Koi ga Shitai! Movie: Take On Me       8       8.12                 Clannad       8       8.01                 Darwin‚Äôs Game       8       7.25                 Death Note       8       8.62                 Digimon Adventure       8       7.77                 Fruits Basket 1st Season       8       8.22                 Fruits Basket 2nd Season       8       8.57                 Fullmetal Alchemist: Brotherhood       8       9.14                             Anime Title       My Rating       MAL Rating                       Haikyuu!!       8       8.45                 Hunter x Hunter (2011)       8       9.05                 Hyouka       8       8.09                 Kaguya-sama wa Kokurasetai: Tensai-tachi no Renai Zunousen       8       8.40                 Kimi no Na wa.       8       8.87                 Kimi no Suizou wo Tabetai       8       8.57                 Kiseijuu: Sei no Kakuritsu       8       8.35                 Koe no Katachi       8       8.95                 Kokoro Connect       8       7.77                 Mimi wo Sumaseba       8       8.22                 Mirai Nikki (TV)       8       7.45                 Nisekoi       8       7.59                 Nisekoi:       8       7.36                 No Game No Life       8       8.11                 Re:Zero kara Hajimeru Isekai Seikatsu       8       8.25                 Re:Zero kara Hajimeru Isekai Seikatsu 2nd Season       8       8.37                 Seishun Buta Yarou wa Yumemiru Shoujo no Yume wo Minai       8       8.62                 Shigatsu wa Kimi no Uso       8       8.66                 Steins;Gate Movie: Fuka Ryouiki no D√©j√† vu       8       8.46                 Suzumiya Haruhi no Shoushitsu       8       8.62                 The Last: Naruto the Movie       8       7.78                 Tokyo Ghoul       8       7.79                 Tonikaku Kawaii: SNS       8       8.13                 Yakusoku no Neverland       8       8.54                 Clannad: After Story       9       8.94                 Code Geass: Hangyaku no Lelouch       9       8.70                 Code Geass: Hangyaku no Lelouch R2       9       8.91                 Fruits Basket: The Final       9       9.03                 Haikyuu!! To the Top       9       8.36                 Kaguya-sama wa Kokurasetai: Ultra Romantic       9       9.16                 Kaguya-sama wa Kokurasetai? Tensai-tachi no Renai Zunousen       9       8.65                 Senryuu Shoujo       9       7.40                 Shingeki no Kyojin Season 3       9       8.62                 Steins;Gate       9       9.08                 Steins;Gate 0       9       8.52              ","categories": ["blog"],
        "tags": ["anime","ratings"],
        "url": "/myanimelist/",
        "teaser": null
      },{
        "title": "Moments that Saved Anime",
        "excerpt":"Anime refers to a specific form of media - hand-drawn or computer-generated animated shows that originate from Japan. Anime differ from western animation productions in various aspects - art style, themes, target audience, etc. Anime have a distinct 2D style that has a particular appeal and that sets it apart from computer generated animation. The themes explored in anime are often very serious, ranging from shows like Neon Genesis Evangelion and Serial Experiments Lain that focus on the human psyche and depression, to more modern shows like Death Note, Code Geass and Attack on Titan that deal with topics like racism, genocide and the subjective nature of morality. Some very popular and mainstream anime include Dragon Ball, Pok√©mon and Naruto.   Here are some moments in various anime series that have become iconic over the years and that portray the depth, intrigue and beauty of storytelling in this form of media. I have restricted myself to one moment per show, for the sake of versatility.   Needless to say, there will be huge spoilers. You have been warned.   Fruits Basket 2019: The Final  ‚ÄúLets make footprints in the snow together.‚Äù        Fruits Basket is a series that I hold very close to my heart, particularly for the drama and romance aspects. In the final season, it is clear that all the various characters are moving beyond their insecurities into the outside world, forging new relations. In the quest to lend meaning to his life, Yuki finds a kindred broken soul in Machi Kuragi.   Kaguya Sama: Love is War!  ‚ÄúA once-in-a-lifetime wish from me to you.‚Äù        Hunter x Hunter  ‚ÄúKomugi, are you there?‚Äù        Clannad After Story  ‚ÄúIt‚Äôs the one you chose and bought for me.‚Äù        Steins Gate  _ ‚ÄúYou are about to begin‚Ä¶ the longest and most imporant ‚Ä¶ 3 weeks of your life‚Äù_        Naruto Shippuden  ‚ÄúI, Madara, declare you the strongest.‚Äù        Code Geass: Lelouch of the Rebellion 2  ‚ÄúAnd that‚Ä¶ Yes. is the Zero requiem.‚Äù        Attack on Titan Season 3 Part 2  ‚ÄúI keep moving forward‚Ä¶‚Äú       ","categories": ["blog"],
        "tags": ["anime","rankings"],
        "url": "/moments/",
        "teaser": null
      },{
        "title": "Getting yourself a Jekyll website",
        "excerpt":"   I work in a theoretical physics research group, and we recently decided to create a new website for the group. Since I had already worked on two websites, I wanted to take this up. For the benefit of myself as well as the others who will come after me and might have to handle the website, I decided to document the entire process, in as much detail as possible. I believe there are too many general-purpose blog posts on creating Jekyll websites in the wild (see, for example, this, this or this), so this will instead be an elaborate wiki for a very specific use case. The website will have a home page that gives an overview of the research of the group, a dedicated page for the list of publications, a gallery for the present and past members of the group, a page for a more detailed exposition on the topics of our research, as well as other miscellaneous content.   Ruby, gems and Jekyll  Ruby is an interpreted, high-level programming language. Libraries in ruby are referred to as gems. RubyGems is a package manager for ruby that makes installing and maintaining gems easier. Bundler is a gem whose job is to create consistent environments for running ruby. It does this by managing the gems that the application depends on. Given a list of gems, it can automatically download and install those gems, as well as any other gems needed by the gems that are listed, all at the appropriate versions.      Finally, Jekyll is a static site generator written in ruby. It is in fact a gem that takes text written in your favorite markup language and uses layouts to create a static website. You can tweak the site‚Äôs look and feel, URLs, the data displayed on the page, and more. Such a website can then be hosted on any server. Github Pages is a free option, where you can host the website on GitHub‚Äôs github.io domain or on a custom domain name of your choice. Jekyll was developed by Tom Preston-Werner, GitHub‚Äôs co-founder.   In summary          gems are libraries in the language Ruby, managed by the RubyGems package manager            bundler creates environments from specified libraries and their versions            Jekyll is a ruby library that  generates a static website from the provided content       With these definitions out of the way, we can now start creating the website.   Starting with a base theme   Choosing a Jekyll theme  There are innumerable Jekyll themes on Github. Each such theme consists of a set of templates, layouts, stylesheets and so on. They represent standalone complete websites, and you can add content to it as well modify the existing colors, designs and so on. We will use the famous Minimal Mistakes theme created by Michael Rose. It has a modern and attractive style, and allows for sufficient customisation. The simplest way to use the theme is to create a copy of it, and then add content on top of it or make modifications wherever necessary. There are a couple of ways of creating a copy of the theme, and both these methods involve its GitHub repository. A GitHub repository is simply a cloud storage location for the contents of the theme. In order to create a copy of this theme, we can either download the theme or fork it. Downloading the repository simply downloads the files, while forking the repository creates a copy of the repository under our own GitHub account. Since we would have to ultimately create a repository anyway, it is more efficient to just fork the theme repository. A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project. Once we fork the repository, the new forked repository becomes our base website which we can then tweak.   Forking the theme repository  All the steps will be performed from the account of epqm, my research group. To fork the repository, go to the Minimal Mistakes GitHub repository and click the Fork button at the top right of the webpage.      The fork button is encircled in the screenshot above. Alternatively, you can just go to this link. Either way, you will end up on the page shown in the screenshot below. In order to finish creating the forked repository, you need to insert a name for the new repository, in the space provided under Repository name. In order to act as a GitHub Pages website, the name of the repository has to be of the form username.github.io, where username has to be replaced with the name of the GitHub user account, which in this case is epqm. Choosing any other name will not allow the repository to be used as a website. Once a suitable name has been entered (a green tick should appear adjacent to the name), click the Create fork button.      Deploying the website   The repository for containing our website has now been created, but the website itself is not active yet. In order to activate it, click on the Settings button at the right end of the top menu.      Inside the settings, click on the Pages option in the left sidebar menu.      We are now in the GitHub Pages part of the settings for our repository. Within these settings, you will have to set the Source by clicking on the Branch menu and choosing the master branch. Branches are essentially views of a repository. If we so desire, the files in the repository can be kept in multiple states, each state representing a branch. Any of these branches can be used to deploy a website. By default, there is only one branch, which is called the master branch. By selecting master from the drop-down menu, we are choosing that branch as our website. After selecting master, click on the Save button adjacent to the Branch menu to make the change permanent.      The website has now been deployed. After about 5 minutes, it should be possible to access the website at https://username.github.io. We will have to modify the content in the repository in order to make this into a personalised website for our use.   Summing it all up  We end this part by summarising the steps involved in creating and deploying the website.           The first step is to choose a Jekyll theme on which to start creating the website.            The next step is to fork the GitHub repository of this theme. While forking, the name of the forked repository has to be of the form username.github.io.            Once the repository is created, we need to go to the repository and click on Settings &gt; Pages, and choose master as the branch from which to deploy the website. This has to be confirmed by clicking on Save.       The repository looks like this:      Git &amp; markdown cheatsheet  Going forward, we will be making use of git and markdown, so its necessary to get familiar with the relevant aspects of them.   What is git?  Git is a free version control system. It is used, at the very minimum, to track changes in software, allowing the possibility of rolling back changes, creating branches for working on multiple features simultaneously, and even removing specific changes among many others. We will need to know of a very small subset of the features of git for our purposes. A very basic workflow using git involves the following: (i) making some changes in a project, (ii) telling git to track the files, and hence note the changes made in the files, (iii) asking git to cement these changes by marking this state of the repository as a checkpoint, and (iv) uploading the changes to some cloud/online repository. The second step is referred to as adding the files. This is done using the command git add &lt;file&gt;. The simplest way is to just add all the files in the project. That is done through git add .. The third step is referred to as committing the changes, and each checkpoint is referred to as a commit. Each commit is (preferably) accompanied by a commit message. Commits are made using the command git commit -m &lt;commit message&gt;. The fourth step is referred to as pushing the commit, and is as simple as git push.   There are some other actions that we might find useful. Creating a local copy of an online repository (say, from GitHub) is referred to as cloning the repository: git clone &lt;repository url&gt;. Fetching the latest version of a cloned repository from the online source is referred to as pulling: git pull. We will also often end up in the following scenario: after committing some changes, we realise that we have forgotten to add some small edit to the commit. This is rectified by making all the changes to the project, adding all the files, and then ammending the previous commit while keeping the commit message unchanged: git commit --ammend --no-edit. The option --ammend means we are rectifying the previous commit, while the option --no-edit means we are keeping the previous commit message unchanged. Note that you need to add the files before running the new commit command. If you had also pushed the previous incomplete commit, you need to add a -f flag when you now push the new amended commit.   Summary of git commands  This is a summary of the git commands that are relevant to us. Each command is a concrete example.     Cloning a repository:     git clone https://github.com/epqm/epqm.github.io           Pulling the latest version of repository:     git pull           Adding and committing the changed files, then push online:     git add file1 file2 # EITHER add specific files git add . # OR add all files, just to be sure git commit -m \"modified this and this\" # commit the changes git push # push changes online           Workflow for rectifying the latest commit:     git add file1 file 2 git commit -m \"this is a commit\" git push # realise you forgot to add a file to the commit git add file1 file2 file3 # add the remaining file git commit --ammend --no-edit # make the ammending commit git push -f # force push the new commit to replace the old one           What is markdown?  Markdown is a markup language: it allows us to create a formatted and structured document by using certain predefined symbols. The markdown file itself is just a plain text file, but it can be converted to other formats like pdf, html, docx, odt and others using software like pandoc. For example, if you write # This is heading in a text file and pass this text file through a markdown-to-latex parser, that line will be replaced by \\section{This is a heading}. This is an example to illustrate what I meant when I said that markdown allows us to add formatting by using only a few symbols. Jekyll allows us to create our webpages in markdown. This means that we can write our posts in markdown, and Jekyll will convert that to html.   Summary of markdown rules  The following is a list of the markdown rules that we will often use to format our documents. The version of markdown that is used by our theme is called Kramdown. Kramdown supports some extra features.      Create headers of decreasing levels by using increasing numbers of #:   # Heading 1 ## Heading 2 ###### Heading 6      Make text bold or italic by enclosing within ** or _:   Normal text, **bold text**, _italic text_      Create unnumbered list using -:    - item 1  - item 2  - item 3      Write programming code by enclosing within ` :   `a += 1`      Insert a horizontal rule using three dashes:   ---      Insert a hyperlink using the syntax [text](link):   [link to repo](https://github.com/epqm/epqm.github.io)      Insert a local image using the syntax ![title for image](path_to_image):   ![this is an image](/assets/images/jekyll/edit-final.svg)   Modifying the website  Modifying the website requires pushing changes to the GitHub repository. Whenever we commit and push a change to the repository, GitHub will recompile the repository and update the website with the changes. There are two broad ways of pushing changes to the repository.   Using GitHub‚Äôs web interface ‚úò  The first way is to use the browser interface of GitHub. By opening the repository in your browser, you can edit any file and immediately commit the changes, and this will also update the website. To demonstrate this, we will update the README.md file. The REAME file is present to provide information regarding the repository. It is only displayed in the GitHub repository web interface, and is not displayed on the website. For example, the current README provides information on the Minimal Mistakes theme, because that is the repository from which we forked our repository. In order to update this file, click on the file name in the list of files.  This displays the contents of the file in the browser. In order to start editing the file, click on the edit icon :  This opens the file in the editor of GitHub. We can now update the contents of the README by deleting all the existing content and replacing it with something relevant and simple for the time being. The final form looks something like this:  To save the changes, we need to commit them. This can be done by supplying a commit message in the box provided just under Commit changes near the bottom of the page, and then clicking on Commit changes.    We have now added our first commit to the repository. Even though this does not affect the website (because the README is not displayed there), this exercise demonstrates how we can modify any file within the repository.   There are, however, two issues with this approach:           You can edit only a single file in each commit. You cannot edit multiple files and then combine all those changes into a single commit.            You cannot preview the edit before you commit them. The only way to find out how the website will be affected by your edit is to check the website after you have committed the edits.       Working with a local copy ‚úî  The more superior approach is to clone the repository (create a local clone in your machine), make changes in your local copy, commit those changes and then push the commits to the GitHub repository. This allows us to make multiple changes within a single commit. We can also preview the changes we have made, by building the repository using Jekyll. While it is true that this requires us to setup git and Jekyll in our local machines, it is only a one-time effort, and is not too tricky. This subsection is a bit long, so we summarise the steps here:      Install git on your machine and download the repository   Install Ruby and relevant gems   Make required changes to files   Build website locally using Jekyll to preview changes   Commit and push changes to upstream when satisfied with changes   We will now elaborate on each of these steps. Note that steps 1 and 2 are preparatory steps and need to be performed only once per website. They are performed only for setting up the environment. Steps 3-5 constitute the workflow that we follow in order to make regular changes to our website.   Creating a local environment   Install git on your machine and download the repository   The basics of git has been summarised in the relevant section. We start by discussing how to install it. On a Linux machine, run one of the following commands in the terminal, depending on the particular distribution you are using:  $ sudo pacman -S git # Arch-based distributions $ sudo apt install git # Debian-based distributions  If you are using macOS, run the following command in the terminal:  $ brew install git  If you are using Windows, go here and click on the link that says 64-bit Git for Windows Setup. This will download the git installer for windows. Once the download has finished, click on the installer and go through all the steps, choosing the default option whenever you are prompted to make a choice.   Now that we have installed git, we need to be able to run git commands. Note that all commands must be run within the folder of the project. On Linux or macOS, you can just open a terminal in the folder of the project and run git commands in that folder. For example, in order to pull the latest version of a research project, we first change into that folder (using cd) and then run git pull.  $ ( ~ )  $ ( ~ ) cd \"/home/historia/storage/work/local MIT\" $ ( local MIT ) git pull Already up to date. $ ( local MIT )  On a Windows machine, we need to change into the folder of the project, right click inside the folder to reveal the drop-down menu, and select Git Bash Here from the menu. This starts a terminal in the folder, where we can now run the same git commands.   Having installed git on your machine, the next step is to provide some details regarding the user account and authentication. Run the following commands in a terminal:  $ git config --global user.name &lt;username&gt; $ git config --global user.email &lt;email id&gt;  The &lt;username&gt; and &lt;email id&gt; are replaced with the username and email-id of your GitHub account. In order to push changes to the GitHub repository, one more step is necessary. In order to authenticate yourself, you need to generate a pair of public-private SSH keys, and add the public key to GitHub. To generate the key, run the following in a terminal:  $ ssh-keygen -t ed25519 -C \"&lt;email id&gt;\"  After running this command, you might be presented with a number of prompts. Press enter at all of them. The final output should display, among other things, the location of the public key. For example, a typical output on Linux reads  $ ssh-keygen -t ed25519 -C \"historia@gmail.com\" Generating public/private ed25519 key pair. Enter file in which to save the key (/home/historia/.ssh/id_ed25519): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/historia/.ssh/id_ed25519 Your public key has been saved in /home/historia/.ssh/id_ed25519.pub The key fingerprint is: SHA256:0w4qTixw3jGOsNObS/5SN2/vkCAA5sjuXp8mjVH7Tek historia@gmail.com  As is apparent, the second line gives the location of the public key. In order to add the public key to GitHub, follow the steps laid out in this GitHub docs page. There is one final step before we are done with setting up git. Whenever we want to push changes for the first time from our local repository to a GitHub repository, we need to specify the branch to which we want to push. In order to avoid doing this for every repository, we run  $ git config --global --add --bool push.autoSetupRemote true  This informs git that any push action will happen between branches of the same name between the local and remote repositories. This concludes setting up git.   The next step is to download the repository. The repository has a url, which can be obtained by opening the GitHub repository in the browser and looking at the navigation bar. For this example, we assume that this url is https://github.com/epqm/epqm.github.io. Copy this url from the browser, and run the following command in either the Linux/macOS terminal or in the Git Bash terminal on Windows:  $ git clone https://github.com/epqm/epqm.github.io  This will download the repository to your machine, into its own folder. By looking at the list of folders, you should be able to tell the name of the folder the repository was downloaded into. Assuming the name of the folder is epqm.github.io, we move into this folder by running cd:  $ cd epqm.github.io   Install Ruby and relevant gems  The next step is to install Ruby and its gems. This is required in order to be able to compile the website locally and see what the website actually looks after the changes we made, before we commit and push the changes. Note also that Ruby2.7 is the version that works best with Jekyll, so that is the version we will install. To install Ruby on a Linux machine, run one of the following commands, depending on your distribution:  $ sudo pacman -S ruby2.7 # Arch-based distributions $ sudo apt install ruby2.7 # Debian-based distributions  On macOS, run the following command:  $ brew install ruby@2.7  These commands need not be run within the repository folder. On Windows, you will need to first go to this download page and click on the link that says Ruby 2.7.6-1 (x64). This downloads the Windows installer for the appropriate Ruby version. Once downloaded, click on the installer and go through the steps to install it, choosing the default option whenever asked to make a choice.   Now that we have installed Ruby 2.7, we have to get into gems. As mentioned before, RubyGems is the library-manager for ruby. It is used to install and remove Ruby libraries, which are also referred to as gems (hence the name RubyGems). The first step is to update RubyGems, and this is done through the commad:  $ sudo gem-2.7 update --system # on Linux $ sudo gem update --system # on macOS $ gem update --system # on Windows  This commands must be run in a Linux/macOS/Windows terminal. The Windows terminal can be accessed from the drop down menu that appears by holding down Shift and then clicking the right mouse button.   Having updated RubyGems, we now need to install the specific gems that are necessary for our website. The list of the necessary gems along with their versions is already provided in the repository in the form of Gemfile(s) which can be read by a gem named bundler. Bundler makes it easy to install a specific set of gems. Note that the following two commands have to be run inside the folder of the repository. You can either use your graphical file explorer to navigate into this folder and open a terminal there, or you can just cd into the folder from a terminal that was opened elsewhere. At any rate, ensure you are in a terminal and inside the repository folder. Then, run the following two commands:  $ bundle config set --local path 'vendor/bundle' # set the location for installing gems $ bundle-2.7 install # install the required gems   The first command sets the location where the gems will be installed. The second command installs the required gems, into the location specified earlier. As mentioned before, the part after the ‚Äò#‚Äô acts as a comment which is ignored by the terminal and which has been provided just for your information.   Broad workflow for making changes   Make required changes to files  Just to demonstrate the workflow of making changes to the website, previewing it and pushing the changes, we will make a simple edit. Open the _pages/about.md file in a text editor. There should be some text between two --- at the top of the page - do not edit that. Instead, remove all the text below the bottom ---, and replace it with something else, like ‚ÄúWelcome to EPQM!‚Äù. Save the changes in the text editor and close it. The below images show the state of the file before and after the edit.      Build website locally using Jekyll to preview changes  Having made some changes, it is time to compile the website using jekyll to preview the changes. In order to compile the website, make sure that you are just inside the repository folder, and not inside anny of the subfolders within the repository. Having ensured this, start a terminal in the folder and run the following command:  $ bundle-2.7 exec jekyll serve -lIw  An explanation of this command is due. The first part bundle-2.7 exec means that we will be running the later part of the command inside the environment created by the gems listed in the Gemfile. This ensures that the correct versions of the libraries are used. The latter part jekyll serve instructs jekyll to compile the website and make it available to be viewed. You can view the website by opening the browser and going to the url http://localhost:4000/. The final part -lIw is a set of options that we have passed to jekyll.     The option w stands for watch; it makes sure that if we keep this command running, jekyll automatically recompiles the website whenever we make and save any changes.   The option l stands for livereload; it refreshes the browser whenever we make and save any changes, in order to reflect the modified website.   The option I means incremental build; it allows faster compiling of the website.   To see the effect our change in the about.md file, open the browser and go to http://localhost:4000/. This will show the home page of the website. At the right end of the top bar, click on the About tab, and this opens the about page of the website. In this page, we should be able to see the message we typed in earlier in the about.md file.      Commit and push changes to upstream when satisfied with changes  Once we are happy with the changes, we need to commit and push them to GitHub, so that they are reflected on the actual website that can be viewed at https://&lt;username&gt;.github.io, which for us is https://epqm.github.io/. As discussed above, the final steps are adding the files, committing the change and then pushing the changes to GitHub.  $ git add . $ git commit -m \"modified about\" $ git push   Important point about editing _config.yml  As mentioned in the Jekyll subsection, whenever we edit and save a file within the repository, the change is immediately reflected in the browser, as long as the Jekyll process is running in the background. This is true for editing all files except the _config.yml file at the root of the repository. Whenever you edit that file, the effect of this edit is not immediately visible. You need to stop the currently-running Jekyll process (by pressing CTRL+c in the terminal) and start a new Jekyll build process (using exactly the same command as before). If you now refresh the browser tab, the change will be visible.   Directory structure of repository   Next, we need to get an idea of what the various folders and files in the repository mean. If you open the repository in any file manager, you should see the following items. Each listed item is followed by a very brief description. For more details, please check out the appropriate page on the official website.           assets/: This folder is used to store various binary files like images and video that we might want to show on the website            .bundle/: This folder is created by bundler to store files that it uses, for example configuration files.            _data/: As the name suggests, this is the folder where you can store data files, like your list of publications or the names of books you have read. This data can be accessed using the liquid variable {{ site.data.&lt;filename&gt; }}.            .git/: This folder is created by git and is used by git to do all its work. This should not be touched under normal circumstances.            _pages/: This folder is used to store all the pages of the website. By pages, I mean content that is more of the blog kind, as compared to notifications and timely posts. Any file of the correct syntax and file name placed in this folder will be interpreted by Jekyll to be a webpage and will be rendered accordingly into the website.            _posts/: This folder stores all the posts of the website. While the pages can be used to represent timeless content like tutorials, essays and blogs, posts usually report notifications, updates and other timely content.            _site/: This is where the final rendered website is created and stored, by Jekyll. GitHub pages looks into this folder and displays its content as the website. We don‚Äôt need to touch this.            vendor/: This is the folder that we had provided to bundler as the location for installing the gems. As such, this is where you can find all the installed gems for this repository. We don‚Äôt need to touch this either.            _config.yml: This file can be used to define a large number of configuration settings for the website, including the title and description, color theme, social media links, website logo. We need to go through this file carefully and set appropriate values for the fields. Also note that while modifications to all other files will automatically be reflected in the browser if Jekyll has been run with the -lIw flags, modifications to the _config.yml file will not be automatically reflected; after saving the changes, you would need to restart the Jekyll process and then refresh the webpages.            Gemfile: This file is used to codify which gems (along with approximate versions) are required by the repository to function properly. It is used by bundler to create the required environment for compiling the website.            Gemfile.lock: This file additionally specifies exactly which versions of the gems mentioned in the Gemfile actually work. This exact version in Gemfile.lock is in contrast to the approximate versioning provided in the Gemfile. We should not need to touch this file.            .gitignore: This is a file used by git; whichever file/path we list in this file will not be tracked (backed up or version-controlled) by git. For example, the vendor folder should be included in this file because we do not want to backup the installed gems - we can always install them anyway.            index.html: This is the home page of the website.            .jekyll-metadata: This helps Jekyll keep track of which files have not been modified since the site was last built, and which files will need to be regenerated on the next build. It is only created when using incremental regeneration. This file will not be included in the generated site.            README.md: This file is not rendered by Jekyll; it is instead rendered on the GitHub repository front page, and can be used to furnish information there.       Getting started - Basic settings  ","categories": ["blog"],
        "tags": ["technology","guide"],
        "url": "/website/",
        "teaser": null
      },{
    "title": "More about me",
    "excerpt":"My name is Abhirup Mukherjee.  I am a research scholar at the Indian Institute of Science Education and Research (IISER) Kolkata, living in Kalyani, West Bengal, India. I work in theoretical condensed matter physics, and am a part of the Emergent Phenomena and Quantum Matter (EPQM) group. I study various topics in the field of strongly correlated materials. When I am not working, I enjoy catching up on the seasonal anime. Although I am not particularly picky when it comes to the genres of the anime I watch, I do enjoy slice of life shows and thrillers the most.   From time to time, I also pick up crime novels. Whenever I get some time, I dabble in Jekyll,  Python and shell scripting, and try out new Linux distributions - I am quite passionate about ricing my desktop. I used to love watching and playing football during my school days. I am part of an organisation named Projectyl that helps undergraduate and graduate students in finding and applying for short projects and internships in India, with the goal of making it easier for them to transition into their research programs. My contact information is available here.           You can always send me emails  for any sort of communication.            You can also reach out to me on Facebook  or LinkedIn .            If you are interested, you can also check out my hobby projects and the numerical parts of my research on Github .            Feel free to check out our work at Projectyl if you are interested in landing a summer or winter project in physics. Hit me up if you want to be a part of the group.         ","url": "http://localhost:4000/about/"
  },{
    "title": "Blog-type Posts",
    "excerpt":"         Getting yourself a Jekyll website            Moments that Saved Anime            My Anime Ratings       ","url": "http://localhost:4000/blogs/"
  },{
    "title": "Hi there!",
    "excerpt":"My name is Abhirup Mukherjee.  I am a research scholar at the Indian Institute of Science Education and Research (IISER) Kolkata, living in Kalyani, West Bengal, India. I work in theoretical condensed matter physics, and am a part of the Emergent Phenomena and Quantum Matter (EPQM) group. I study various topics in the field of strongly correlated materials. When I am not working, I enjoy catching up on the seasonal anime. Although I am not particularly picky when it comes to the genres of the anime I watch, I do enjoy slice of life shows and thrillers the most.   From time to time, I also pick up crime novels. Whenever I get some time, I dabble in Jekyll,  Python and shell scripting, and try out new Linux distributions - I am quite passionate about ricing my desktop. I used to love watching and playing football during my school days. I am part of an organisation named Projectyl that helps undergraduate and graduate students in finding and applying for short projects and internships in India, with the goal of making it easier for them to transition into their research programs. My contact information is available here.     ","url": "http://localhost:4000/"
  },{
    "title": "Hello there! Welcome to my website.",
    "excerpt":"My name is Abhirup Mukherjee. I am a research scholar at the Indian Institute of Science Education and Research (IISER) Kolkata , living in Kalyani, West Bengal, India. I work in theoretical condensed matter physics, and am a part of the Emergent Phenomena and Quantum Matter (EPQM) group. I study various topics in the field of strongly correlated materials. Learn more about me here.      Updates           [New work] On the Multi-channel Kondo problem   15 May, 2022            [New work] On the Single-channel Kondo problem   15 April, 2022       See all  ","url": "http://localhost:4000/"
  },{
    "title": "MS Thesis",
    "excerpt":"Master‚Äôs thesis work   Towards my master‚Äôs research project (can be found here), I performed an analytical non-perturbative renormalization group analysis of an extended single impurity Anderson model (SIAM). The standard SIAM involves a correlated impurity site embedded in a conduction bath, the two being coupled through a single-particle hopping. The analysis includes a derivation of the unitary renormalization group (URG) equations for the couplings, as well as computation of physical properties. The URG is a recent many-body technique developed in Refs [1-4], and is applies unitary transformations on the Hamiltonian to decouple high energy modes, leading to a low-energy effective Hamiltonian. We apply the URG on a generalized version of the SIAM with explicit spin-exchange and charge isospin-exchange couplings. We find strong-coupling fixed points for both the spin and isospin couplings. We characterise the fixed-point by studying the ground state wavefunctions and thermodynamic quantities like the magnetic susceptibility and the specific heat. We extract an effective Hamiltonian for the cloud of electrons that screen the impurity. This effective Hamiltonian is found to contain both Fermi liquid as well as four-Fermion off-diagonal interaction terms. We show that the flow to the strong-coupling fixed point involves a change in the topological Luttinger volume by 1. We finally calculate the mutual information and correlations along the RG flow between impurity and a Kondo cloud electron, as well as between two members of the Kondo cloud. Both the measures increase towards the strong-coupling fixed point, showing that the flow towards low energies is accompanied by a substantial increase in the entanglement content.   References     A Mukherjee and S Lal 2020 New J. Phys. 22 063007   A Mukherjee and S Lal 2020 New J. Phys. 22 063008   A Mukherjee and S Lal 2020 Nuclear Physics B 960 115170   A Mukherjee and S Lal 2020 Nuclear Physics B 960 115163   My master‚Äôs project thesis    ","url": "http://localhost:4000/ms-thesis/"
  },{
    "title": "The tight-binding model on the 2D square lattice",
    "excerpt":"The tight-binding model on the 2D square lattice   This is a quick introduction to the tight-binding problem on a 2D square lattice. I describe how it can be obtained from a more general model, its solution and some of its important properties like the isoenergetic contours and van Hove singularities.    ","url": "http://localhost:4000/phys_note1/"
  },{
    "title": "Topological significance of the crystal momentum",
    "excerpt":"Topological significance of the crystal momentum   This is a re-working of R. Rajaraman‚Äôs demonstration that the tight-binding dispersion can be obtained by treating the problem of electrons moving in a periodic potential in terms of instantons. This has the advantage that the crystal momentum can be identified as a topological winding number.    ","url": "http://localhost:4000/phys_note2/"
  },{
    "title": "R. Shankar's RG derivation for Landau Fermi liquid and BCS instability",
    "excerpt":"R. Shankar‚Äôs RG derivation for Landau Fermi liquid and BCS instability   This is an expansion of R. Shankar‚Äôs derivation (Shankar, 1993) of the Landau Fermi liquid effective Hamiltonian and its possible BCS instability by applying the renormalization group technique on a general 2D interacting fermionic system with a circular Fermi surface. I have added a short introduction to the philosophy of renormalisation group. Certain non-trivial arguments and calculations have also been fleshed out. Where possible, certain parts have been simplified.    ","url": "http://localhost:4000/phys_note3/"
  },{
    "title": "Lightning-quick introduction to single site dynamical mean field theory",
    "excerpt":"Lightning-quick introduction to single site dynamical mean field theory   This is a very short introduction to the philosophy and algorithm of dynamical mean field theory (DMFT). I brought these points together and wrote this up mostly to cement my own understanding of the topic. I first discuss the Curie-Weiss mean field theory in the context of the Ising model in order to provide a familiar language, and set up in a slightly different way so that it is easily generalised to DMFT. This might be useful for anyone wanting to know, in brief, what DMFT is, and how it is implemented.    ","url": "http://localhost:4000/phys_note4/"
  },{
    "title": "Recent Posts",
    "excerpt":"         Getting yourself a Jekyll website   5 July, 2022            Moments that Saved Anime   20 June, 2022            My Anime Ratings   10 June, 2022            [New work] On the Multi-channel Kondo problem   15 May, 2022            [New work] On the Single-channel Kondo problem   15 April, 2022       ","url": "http://localhost:4000/posts/"
  },{
    "title": "Research",
    "excerpt":"Ongoing Projects   Holographic entanglement in free fermionic quantum matter: hierarchy &amp; topology   A new auxiliary model approach to studying fermionic systems of strong correlation   Local metal-insulator transition in a generalised Anderson impurity model     Impurity models like the [Anderson](https://en.wikipedia.org/wiki/Anderson_impurity_model) and [Kondo](https://en.wikipedia.org/wiki/Kondo_model) models are used as auxiliary models to study [metal-insulator transitions](https://en.wikipedia.org/wiki/Metal%E2%80%93insulator_transition) in bulk models like the [Hubbard](https://en.wikipedia.org/wiki/Hubbard_model) using [dynamical mean-field theory](https://en.wikipedia.org/wiki/Dynamical_mean-field_theory). The precise method of finding the appropriate parameters of the impurity model involves solving self-consistent equations. During this process, the impurity model keeps evolving until translation symmetry is achieved in the impurity+bath system. While this does show a transition at a critical value of the onsite Hubbard $U$, there is at present **no way** of connecting the thermodynamics of the bulk to that of the impurity. This is partly due to the **opacity** involved in the self-consistency loop in the DMFT-based methods. The other roadblock is the fact that since  the impurity model keeps updating itself in the process, it is not clear which single impurity model can be mapped to the bulk model, such that the former can be used to study the later.   We propose here a **minimal** impurity model as the auxiliary model that can be used to study metal-insulator transitions in bulk models like the Hubbard. The minimal model is obtained by adding **spin-exchange physics and local bath correlation** into the single impurity Anderson model. We prove this by demonstrating the presence of both metallic (screened) as well as insulating (unscreened) phases through a renormalisation group treatment of such a model. We show that this **impurity phase transition** is brought about by **increased charge isospin fluctuations** in the bath; indeed, it is these fluctuations that destabilise the Kondo cloud and lead to a breakdown of screening.   This transition is characterised by a measure of [many-particle entanglement](https://en.wikipedia.org/wiki/Quantum_entanglement) $\\left(\\chi\\right)$ which acts as an [order parameter](https://www.oxfordreference.com/view/10.1093/oi/authority.20110803100253339) - it is non-zero in the screened phase and reduces to zero in the unscreened phase. This is made possible by relating the impurity Greens function to $\\chi$, and it turns out that such relations exist for any 1-particle or 2-particle impurity-bath correlation. Such an auxiliary model approach to studying bulk systems of strong correlation is qualitatively different from a more conventional approach like dynamical mean-field theory or its cluster variants. There is no need to obtain the impurity model self-consistently, and this makes it possible to directly relate the thermodynamics of the bulk model to that of the impurity.   Completed Projects   Frustration shapes multi-channel Kondo physics: a star graph perspective    S. Patra,&emsp;Abhirup Mukherjee,&emsp;A. Mukherjee,&emsp;N. S. Vidhyadhiraja,&emsp;A. Taraphder,&emsp;S. Lal  \t 02/05/22       arXiv  More     Unveiling the Kondo cloud: Unitary renormalization-group study of the Kondo model    A. Mukherjee,&emsp;Abhirup Mukherjee,&emsp;N. S. Vidhyadhiraja,&emsp;A. Taraphder,&emsp;S. Lal  \t 14/02/22    Phys. Rev. B   arXiv  More     ","url": "http://localhost:4000/research/"
  },{
    "title": "Work",
    "excerpt":"For more details, please check out the projects I have been involved in.   Overview   I work in theoretical condensed matter physics, more specifically on strongly correlated fermionic systems. Strong correlation refers to interaction that cannot be expressed purely in terms of single-particle scattering. One of the most popular mathematical models of strong electronic correlation is the Hubbard model - it consists of electrons hopping across a lattice, but each site has a repulsion term that makes it energetically costly for the site to be doubly occupied. This roughly means that each electron will be able to ‚Äúfeel‚Äù the presence of other electrons.      The fact that the electrons have to account for the presence of the other electrons is what makes this a complicated many-body problem - its not possible to solve for a single electron without also considering the effect of all the other electrons. I am a part of the Emergent Phenomena and Quantum Matter (EPQM) group. The group‚Äôs work involves studying quantum models of correlation and obtaining novel emergent states of matter. The models that have been studied involve quantum magnetism, strong correlation, impurity physics, superconductivity, and others. Other topics of research in the group involve studying the nature of entanglement in gapped (topologically ordered) as well gapless states of matter.   Specific research interests           Quantum impurity models and phase transitions within them            Using auxiliary models for studying emergence in fermionic systems            Emergence in heavy fermion systems via lattice impurity models            Entanglement, topology and other properties of metallic systems            Renormalisation group in the context of optimization problems            Quantum hall systems and other topologically states of matter          Master‚Äôs thesis work   A short abstract of my master‚Äôs research work and the thesis itself can be found here. I studied an extended Anderson impurity model using an analytical non-perturbative renormalisation group method.   Informal write-ups   These are some casual documents I have prepared on various topics while learning them, either for courses I was attending or for my tutor assistantships. They might be helpful as very quick introductions or as an opinionated conglomeration of the ideas of certain topics.   The tight-binding model on the 2D square lattice: This is a quick introduction to the tight-binding problem on a 2D square lattice. I describe how it can be obtained from a more general model, its solution and some of its important properties like the isoenergetic contours and van Hove singularities.   Topological significance of the crystal momentum: This is a re-working of R. Rajaraman‚Äôs demonstration that the tight-binding dispersion can be obtained by treating the problem of electrons moving in a periodic potential in terms of instantons. This has the advantage that the crystal momentum can be identified as a topological winding number.   R. Shankar‚Äôs RG derivation for Landau Fermi liquid and BCS instability: This is an expansion of R. Shankar‚Äôs derivation (Shankar, 1993) of the Landau Fermi liquid effective Hamiltonian and its possible BCS instability by applying the renormalization group technique on a general 2D interacting fermionic system with a circular Fermi surface. I have added a short introduction to the philosophy of renormalisation group. Certain non-trivial arguments and calculations have also been fleshed out. Where possible, certain parts have been simplified.   Lightning-quick introduction to single site dynamical mean field theory: This is a very short introduction to the philosophy and algorithm of dynamical mean field theory (DMFT). I brought these points together and wrote this up mostly to cement my own understanding of the topic. I first discuss the Curie-Weiss mean field theory in the context of the Ising model in order to provide a familiar language, and set up in a slightly different way so that it is easily generalised to DMFT. This might be useful for anyone wanting to know, in brief, what DMFT is, and how it is implemented.  ","url": "http://localhost:4000/work/"
  },{
    "title": null,
    "excerpt":"var idx = lunr(function () {   this.field('title')   this.field('excerpt')   this.field('categories')   this.field('tags')   this.ref('id')    this.pipeline.remove(lunr.trimmer)    for (var item in store) {     this.add({       title: store[item].title,       excerpt: store[item].excerpt,       categories: store[item].categories,       tags: store[item].tags,       id: item     })   } });  $(document).ready(function() {   $('input#search').on('keyup', function () {     var resultdiv = $('#results');     var query = $(this).val().toLowerCase();     var result =       idx.query(function (q) {         query.split(lunr.tokenizer.separator).forEach(function (term) {           q.term(term, { boost: 100 })           if(query.lastIndexOf(\" \") != query.length-1){             q.term(term, {  usePipeline: false, wildcard: lunr.Query.wildcard.TRAILING, boost: 10 })           }           if (term != \"\"){             q.term(term, {  usePipeline: false, editDistance: 1, boost: 1 })           }         })       });     resultdiv.empty();     resultdiv.prepend(''+result.length+' Result(s) found ');     for (var item in result) {       var ref = result[item].ref;       if(store[ref].teaser){         var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+                 ''+               ''+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       else{     \t  var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       resultdiv.append(searchitem);     }   }); }); ","url": "http://localhost:4000/assets/js/lunr/lunr-en.js"
  },{
    "title": null,
    "excerpt":"step1list = new Array(); step1list[\"Œ¶ŒëŒìŒôŒë\"] = \"Œ¶Œë\"; step1list[\"Œ¶ŒëŒìŒôŒüŒ•\"] = \"Œ¶Œë\"; step1list[\"Œ¶ŒëŒìŒôŒ©Œù\"] = \"Œ¶Œë\"; step1list[\"Œ£ŒöŒëŒìŒôŒë\"] = \"Œ£ŒöŒë\"; step1list[\"Œ£ŒöŒëŒìŒôŒüŒ•\"] = \"Œ£ŒöŒë\"; step1list[\"Œ£ŒöŒëŒìŒôŒ©Œù\"] = \"Œ£ŒöŒë\"; step1list[\"ŒüŒõŒüŒìŒôŒüŒ•\"] = \"ŒüŒõŒü\"; step1list[\"ŒüŒõŒüŒìŒôŒë\"] = \"ŒüŒõŒü\"; step1list[\"ŒüŒõŒüŒìŒôŒ©Œù\"] = \"ŒüŒõŒü\"; step1list[\"Œ£ŒüŒìŒôŒüŒ•\"] = \"Œ£Œü\"; step1list[\"Œ£ŒüŒìŒôŒë\"] = \"Œ£Œü\"; step1list[\"Œ£ŒüŒìŒôŒ©Œù\"] = \"Œ£Œü\"; step1list[\"Œ§ŒëŒ§ŒüŒìŒôŒë\"] = \"Œ§ŒëŒ§Œü\"; step1list[\"Œ§ŒëŒ§ŒüŒìŒôŒüŒ•\"] = \"Œ§ŒëŒ§Œü\"; step1list[\"Œ§ŒëŒ§ŒüŒìŒôŒ©Œù\"] = \"Œ§ŒëŒ§Œü\"; step1list[\"ŒöŒ°ŒïŒëŒ£\"] = \"ŒöŒ°Œï\"; step1list[\"ŒöŒ°ŒïŒëŒ§ŒüŒ£\"] = \"ŒöŒ°Œï\"; step1list[\"ŒöŒ°ŒïŒëŒ§Œë\"] = \"ŒöŒ°Œï\"; step1list[\"ŒöŒ°ŒïŒëŒ§Œ©Œù\"] = \"ŒöŒ°Œï\"; step1list[\"Œ†ŒïŒ°ŒëŒ£\"] = \"Œ†ŒïŒ°\"; step1list[\"Œ†ŒïŒ°ŒëŒ§ŒüŒ£\"] = \"Œ†ŒïŒ°\"; step1list[\"Œ†ŒïŒ°ŒëŒ§Œë\"] = \"Œ†ŒïŒ°\"; step1list[\"Œ†ŒïŒ°ŒëŒ§Œ©Œù\"] = \"Œ†ŒïŒ°\"; step1list[\"Œ§ŒïŒ°ŒëŒ£\"] = \"Œ§ŒïŒ°\"; step1list[\"Œ§ŒïŒ°ŒëŒ§ŒüŒ£\"] = \"Œ§ŒïŒ°\"; step1list[\"Œ§ŒïŒ°ŒëŒ§Œë\"] = \"Œ§ŒïŒ°\"; step1list[\"Œ§ŒïŒ°ŒëŒ§Œ©Œù\"] = \"Œ§ŒïŒ°\"; step1list[\"Œ¶Œ©Œ£\"] = \"Œ¶Œ©\"; step1list[\"Œ¶Œ©Œ§ŒüŒ£\"] = \"Œ¶Œ©\"; step1list[\"Œ¶Œ©Œ§Œë\"] = \"Œ¶Œ©\"; step1list[\"Œ¶Œ©Œ§Œ©Œù\"] = \"Œ¶Œ©\"; step1list[\"ŒöŒëŒòŒïŒ£Œ§Œ©Œ£\"] = \"ŒöŒëŒòŒïŒ£Œ§\"; step1list[\"ŒöŒëŒòŒïŒ£Œ§Œ©Œ§ŒüŒ£\"] = \"ŒöŒëŒòŒïŒ£Œ§\"; step1list[\"ŒöŒëŒòŒïŒ£Œ§Œ©Œ§Œë\"] = \"ŒöŒëŒòŒïŒ£Œ§\"; step1list[\"ŒöŒëŒòŒïŒ£Œ§Œ©Œ§Œ©Œù\"] = \"ŒöŒëŒòŒïŒ£Œ§\"; step1list[\"ŒìŒïŒìŒüŒùŒüŒ£\"] = \"ŒìŒïŒìŒüŒù\"; step1list[\"ŒìŒïŒìŒüŒùŒüŒ§ŒüŒ£\"] = \"ŒìŒïŒìŒüŒù\"; step1list[\"ŒìŒïŒìŒüŒùŒüŒ§Œë\"] = \"ŒìŒïŒìŒüŒù\"; step1list[\"ŒìŒïŒìŒüŒùŒüŒ§Œ©Œù\"] = \"ŒìŒïŒìŒüŒù\";  v = \"[ŒëŒïŒóŒôŒüŒ•Œ©]\"; v2 = \"[ŒëŒïŒóŒôŒüŒ©]\"  function stemWord(w) {   var stem;   var suffix;   var firstch;   var origword = w;   test1 = new Boolean(true);    if(w.length '+result.length+' Result(s) found ');     for (var item in result) {       var ref = result[item].ref;       if(store[ref].teaser){         var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+                 ''+               ''+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       else{     \t  var searchitem =           ''+             ''+               ''+                 ''+store[ref].title+''+               ' '+               ''+store[ref].excerpt.split(\" \").splice(0,20).join(\" \")+'... '+             ''+           '';       }       resultdiv.append(searchitem);     }   }); }); ","url": "http://localhost:4000/assets/js/lunr/lunr-gr.js"
  },{
    "title": null,
    "excerpt":"var store = [   {%- for c in site.collections -%}     {%- if forloop.last -%}       {%- assign l = true -%}     {%- endif -%}     {%- assign docs = c.docs | where_exp:'doc','doc.search != false' -%}     {%- for doc in docs -%}       {%- if doc.header.teaser -%}         {%- capture teaser -%}{{ doc.header.teaser }}{%- endcapture -%}       {%- else -%}         {%- assign teaser = site.teaser -%}       {%- endif -%}       {         \"title\": {{ doc.title | jsonify }},         \"excerpt\":           {%- if site.search_full_content == true -%}             {{ doc.content | newline_to_br |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \"|             strip_html | strip_newlines | jsonify }},           {%- else -%}             {{ doc.content | newline_to_br |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \" |               replace:\" \", \" \"|             strip_html | strip_newlines | truncatewords: 50 | jsonify }},           {%- endif -%}         \"categories\": {{ doc.categories | jsonify }},         \"tags\": {{ doc.tags | jsonify }},         \"url\": {{ doc.url | relative_url | jsonify }},         \"teaser\": {{ teaser | relative_url | jsonify }}       }{%- unless forloop.last and l -%},{%- endunless -%}     {%- endfor -%}   {%- endfor -%}{%- if site.lunr.search_within_pages -%},   {%- assign pages = site.pages | where_exp:'doc','doc.search != false' -%}   {%- for doc in pages -%}     {%- if forloop.last -%}       {%- assign l = true -%}     {%- endif -%}   {     \"title\": {{ doc.title | jsonify }},     \"excerpt\":         {%- if site.search_full_content == true -%}           {{ doc.content | newline_to_br |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \"|           strip_html | strip_newlines | jsonify }},         {%- else -%}           {{ doc.content | newline_to_br |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \" |             replace:\" \", \" \"|           strip_html | strip_newlines | truncatewords: 50 | jsonify }},         {%- endif -%}       \"url\": {{ doc.url | absolute_url | jsonify }}   }{%- unless forloop.last and l -%},{%- endunless -%}   {%- endfor -%} {%- endif -%}] ","url": "http://localhost:4000/assets/js/lunr/lunr-store.js"
  },{
    "title": null,
    "excerpt":" {% if page.xsl %} {% endif %} {% assign collections = site.collections | where_exp:'collection','collection.output != false' %}{% for collection in collections %}{% assign docs = collection.docs | where_exp:'doc','doc.sitemap != false' %}{% for doc in docs %} {{ doc.url | replace:'/index.html','/' | absolute_url | xml_escape }} {% if doc.last_modified_at or doc.date %}{{ doc.last_modified_at | default: doc.date | date_to_xmlschema }} {% endif %} {% endfor %}{% endfor %}{% assign pages = site.html_pages | where_exp:'doc','doc.sitemap != false' | where_exp:'doc','doc.url != \"/404.html\"' %}{% for page in pages %} {{ page.url | replace:'/index.html','/' | absolute_url | xml_escape }} {% if page.last_modified_at %}{{ page.last_modified_at | date_to_xmlschema }} {% endif %} {% endfor %}{% assign static_files = page.static_files | where_exp:'page','page.sitemap != false' | where_exp:'page','page.name != \"404.html\"' %}{% for file in static_files %} {{ file.path | replace:'/index.html','/' | absolute_url | xml_escape }} {{ file.modified_time | date_to_xmlschema }}  {% endfor %} ","url": "http://localhost:4000/sitemap.xml"
  },{
    "title": null,
    "excerpt":"Sitemap: {{ \"sitemap.xml\" | absolute_url }} ","url": "http://localhost:4000/robots.txt"
  },{
    "title": null,
    "excerpt":"{% if page.xsl %}{% endif %}Jekyll{{ site.time | date_to_xmlschema }}{{ page.url | absolute_url | xml_escape }}{% assign title = site.title | default: site.name %}{% if page.collection != \"posts\" %}{% assign collection = page.collection | capitalize %}{% assign title = title | append: \" | \" | append: collection %}{% endif %}{% if page.category %}{% assign category = page.category | capitalize %}{% assign title = title | append: \" | \" | append: category %}{% endif %}{% if title %}{{ title | smartify | xml_escape }}{% endif %}{% if site.description %}{{ site.description | xml_escape }}{% endif %}{% if site.author %}{{ site.author.name | default: site.author | xml_escape }}{% if site.author.email %}{{ site.author.email | xml_escape }}{% endif %}{% if site.author.uri %}{{ site.author.uri | xml_escape }}{% endif %}{% endif %}{% if page.tags %}{% assign posts = site.tags[page.tags] %}{% else %}{% assign posts = site[page.collection] %}{% endif %}{% if page.category %}{% assign posts = posts | where: \"category\", page.category %}{% endif %}{% unless site.show_drafts %}{% assign posts = posts | where_exp: \"post\", \"post.draft != true\" %}{% endunless %}{% assign posts = posts | sort: \"date\" | reverse %}{% assign posts_limit = site.feed.posts_limit | default: 10 %}{% for post in posts limit: posts_limit %}{% assign post_title = post.title | smartify | strip_html | normalize_whitespace | xml_escape %}{{ post_title }}{{ post.date | date_to_xmlschema }}{{ post.last_modified_at | default: post.date | date_to_xmlschema }}{{ post.id | absolute_url | xml_escape }}{% assign excerpt_only = post.feed.excerpt_only | default: site.feed.excerpt_only %}{% unless excerpt_only %}{{ post.content | strip | xml_escape }}{% endunless %}{% assign post_author = post.author | default: post.authors[0] | default: site.author %}{% assign post_author = site.data.authors[post_author] | default: post_author %}{% assign post_author_email = post_author.email | default: nil %}{% assign post_author_uri = post_author.uri | default: nil %}{% assign post_author_name = post_author.name | default: post_author %}{{ post_author_name | default: \"\" | xml_escape }}{% if post_author_email %}{{ post_author_email | xml_escape }}{% endif %}{% if post_author_uri %}{{ post_author_uri | xml_escape }}{% endif %}{% if post.category %}{% elsif post.categories %}{% for category in post.categories %}{% endfor %}{% endif %}{% for tag in post.tags %}{% endfor %}{% if post.excerpt and post.excerpt != empty %}{{ post.excerpt | strip_html | normalize_whitespace | xml_escape }}{% endif %}{% assign post_image = post.image.path | default: post.image %}{% if post_image %}{% unless post_image contains \"://\" %}{% assign post_image = post_image | absolute_url %}{% endunless %}{% endif %}{% endfor %}","url": "http://localhost:4000/feed.xml"
  }]
